// Code generated by protoc-gen-go.
// source: github.com/jdextraze/go-gesclient/messages/ClientMessageDtos.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	github.com/jdextraze/go-gesclient/messages/ClientMessageDtos.proto

It has these top-level messages:
	NewEvent
	EventRecord
	ResolvedIndexedEvent
	ResolvedEvent
	WriteEvents
	WriteEventsCompleted
	DeleteStream
	DeleteStreamCompleted
	TransactionStart
	TransactionStartCompleted
	TransactionWrite
	TransactionWriteCompleted
	TransactionCommit
	TransactionCommitCompleted
	ReadEvent
	ReadEventCompleted
	ReadStreamEvents
	ReadStreamEventsCompleted
	ReadAllEvents
	ReadAllEventsCompleted
	CreatePersistentSubscription
	DeletePersistentSubscription
	UpdatePersistentSubscription
	UpdatePersistentSubscriptionCompleted
	CreatePersistentSubscriptionCompleted
	DeletePersistentSubscriptionCompleted
	ConnectToPersistentSubscription
	PersistentSubscriptionAckEvents
	PersistentSubscriptionNakEvents
	PersistentSubscriptionConfirmation
	PersistentSubscriptionStreamEventAppeared
	SubscribeToStream
	SubscriptionConfirmation
	StreamEventAppeared
	UnsubscribeFromStream
	SubscriptionDropped
	NotHandled
	ScavengeDatabase
	ScavengeDatabaseCompleted
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OperationResult int32

const (
	OperationResult_Success              OperationResult = 0
	OperationResult_PrepareTimeout       OperationResult = 1
	OperationResult_CommitTimeout        OperationResult = 2
	OperationResult_ForwardTimeout       OperationResult = 3
	OperationResult_WrongExpectedVersion OperationResult = 4
	OperationResult_StreamDeleted        OperationResult = 5
	OperationResult_InvalidTransaction   OperationResult = 6
	OperationResult_AccessDenied         OperationResult = 7
)

var OperationResult_name = map[int32]string{
	0: "Success",
	1: "PrepareTimeout",
	2: "CommitTimeout",
	3: "ForwardTimeout",
	4: "WrongExpectedVersion",
	5: "StreamDeleted",
	6: "InvalidTransaction",
	7: "AccessDenied",
}
var OperationResult_value = map[string]int32{
	"Success":              0,
	"PrepareTimeout":       1,
	"CommitTimeout":        2,
	"ForwardTimeout":       3,
	"WrongExpectedVersion": 4,
	"StreamDeleted":        5,
	"InvalidTransaction":   6,
	"AccessDenied":         7,
}

func (x OperationResult) Enum() *OperationResult {
	p := new(OperationResult)
	*p = x
	return p
}
func (x OperationResult) String() string {
	return proto.EnumName(OperationResult_name, int32(x))
}
func (x *OperationResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OperationResult_value, data, "OperationResult")
	if err != nil {
		return err
	}
	*x = OperationResult(value)
	return nil
}
func (OperationResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReadEventCompleted_ReadEventResult int32

const (
	ReadEventCompleted_Success       ReadEventCompleted_ReadEventResult = 0
	ReadEventCompleted_NotFound      ReadEventCompleted_ReadEventResult = 1
	ReadEventCompleted_NoStream      ReadEventCompleted_ReadEventResult = 2
	ReadEventCompleted_StreamDeleted ReadEventCompleted_ReadEventResult = 3
	ReadEventCompleted_Error         ReadEventCompleted_ReadEventResult = 4
	ReadEventCompleted_AccessDenied  ReadEventCompleted_ReadEventResult = 5
)

var ReadEventCompleted_ReadEventResult_name = map[int32]string{
	0: "Success",
	1: "NotFound",
	2: "NoStream",
	3: "StreamDeleted",
	4: "Error",
	5: "AccessDenied",
}
var ReadEventCompleted_ReadEventResult_value = map[string]int32{
	"Success":       0,
	"NotFound":      1,
	"NoStream":      2,
	"StreamDeleted": 3,
	"Error":         4,
	"AccessDenied":  5,
}

func (x ReadEventCompleted_ReadEventResult) Enum() *ReadEventCompleted_ReadEventResult {
	p := new(ReadEventCompleted_ReadEventResult)
	*p = x
	return p
}
func (x ReadEventCompleted_ReadEventResult) String() string {
	return proto.EnumName(ReadEventCompleted_ReadEventResult_name, int32(x))
}
func (x *ReadEventCompleted_ReadEventResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReadEventCompleted_ReadEventResult_value, data, "ReadEventCompleted_ReadEventResult")
	if err != nil {
		return err
	}
	*x = ReadEventCompleted_ReadEventResult(value)
	return nil
}
func (ReadEventCompleted_ReadEventResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

type ReadStreamEventsCompleted_ReadStreamResult int32

const (
	ReadStreamEventsCompleted_Success       ReadStreamEventsCompleted_ReadStreamResult = 0
	ReadStreamEventsCompleted_NoStream      ReadStreamEventsCompleted_ReadStreamResult = 1
	ReadStreamEventsCompleted_StreamDeleted ReadStreamEventsCompleted_ReadStreamResult = 2
	ReadStreamEventsCompleted_NotModified   ReadStreamEventsCompleted_ReadStreamResult = 3
	ReadStreamEventsCompleted_Error         ReadStreamEventsCompleted_ReadStreamResult = 4
	ReadStreamEventsCompleted_AccessDenied  ReadStreamEventsCompleted_ReadStreamResult = 5
)

var ReadStreamEventsCompleted_ReadStreamResult_name = map[int32]string{
	0: "Success",
	1: "NoStream",
	2: "StreamDeleted",
	3: "NotModified",
	4: "Error",
	5: "AccessDenied",
}
var ReadStreamEventsCompleted_ReadStreamResult_value = map[string]int32{
	"Success":       0,
	"NoStream":      1,
	"StreamDeleted": 2,
	"NotModified":   3,
	"Error":         4,
	"AccessDenied":  5,
}

func (x ReadStreamEventsCompleted_ReadStreamResult) Enum() *ReadStreamEventsCompleted_ReadStreamResult {
	p := new(ReadStreamEventsCompleted_ReadStreamResult)
	*p = x
	return p
}
func (x ReadStreamEventsCompleted_ReadStreamResult) String() string {
	return proto.EnumName(ReadStreamEventsCompleted_ReadStreamResult_name, int32(x))
}
func (x *ReadStreamEventsCompleted_ReadStreamResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReadStreamEventsCompleted_ReadStreamResult_value, data, "ReadStreamEventsCompleted_ReadStreamResult")
	if err != nil {
		return err
	}
	*x = ReadStreamEventsCompleted_ReadStreamResult(value)
	return nil
}
func (ReadStreamEventsCompleted_ReadStreamResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

type ReadAllEventsCompleted_ReadAllResult int32

const (
	ReadAllEventsCompleted_Success      ReadAllEventsCompleted_ReadAllResult = 0
	ReadAllEventsCompleted_NotModified  ReadAllEventsCompleted_ReadAllResult = 1
	ReadAllEventsCompleted_Error        ReadAllEventsCompleted_ReadAllResult = 2
	ReadAllEventsCompleted_AccessDenied ReadAllEventsCompleted_ReadAllResult = 3
)

var ReadAllEventsCompleted_ReadAllResult_name = map[int32]string{
	0: "Success",
	1: "NotModified",
	2: "Error",
	3: "AccessDenied",
}
var ReadAllEventsCompleted_ReadAllResult_value = map[string]int32{
	"Success":      0,
	"NotModified":  1,
	"Error":        2,
	"AccessDenied": 3,
}

func (x ReadAllEventsCompleted_ReadAllResult) Enum() *ReadAllEventsCompleted_ReadAllResult {
	p := new(ReadAllEventsCompleted_ReadAllResult)
	*p = x
	return p
}
func (x ReadAllEventsCompleted_ReadAllResult) String() string {
	return proto.EnumName(ReadAllEventsCompleted_ReadAllResult_name, int32(x))
}
func (x *ReadAllEventsCompleted_ReadAllResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReadAllEventsCompleted_ReadAllResult_value, data, "ReadAllEventsCompleted_ReadAllResult")
	if err != nil {
		return err
	}
	*x = ReadAllEventsCompleted_ReadAllResult(value)
	return nil
}
func (ReadAllEventsCompleted_ReadAllResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 0}
}

type UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult int32

const (
	UpdatePersistentSubscriptionCompleted_Success      UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult = 0
	UpdatePersistentSubscriptionCompleted_DoesNotExist UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult = 1
	UpdatePersistentSubscriptionCompleted_Fail         UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult = 2
	UpdatePersistentSubscriptionCompleted_AccessDenied UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult = 3
)

var UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_name = map[int32]string{
	0: "Success",
	1: "DoesNotExist",
	2: "Fail",
	3: "AccessDenied",
}
var UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_value = map[string]int32{
	"Success":      0,
	"DoesNotExist": 1,
	"Fail":         2,
	"AccessDenied": 3,
}

func (x UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult) Enum() *UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult {
	p := new(UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult)
	*p = x
	return p
}
func (x UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult) String() string {
	return proto.EnumName(UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_name, int32(x))
}
func (x *UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_value, data, "UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult")
	if err != nil {
		return err
	}
	*x = UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult(value)
	return nil
}
func (UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23, 0}
}

type CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult int32

const (
	CreatePersistentSubscriptionCompleted_Success       CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult = 0
	CreatePersistentSubscriptionCompleted_AlreadyExists CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult = 1
	CreatePersistentSubscriptionCompleted_Fail          CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult = 2
	CreatePersistentSubscriptionCompleted_AccessDenied  CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult = 3
)

var CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_name = map[int32]string{
	0: "Success",
	1: "AlreadyExists",
	2: "Fail",
	3: "AccessDenied",
}
var CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_value = map[string]int32{
	"Success":       0,
	"AlreadyExists": 1,
	"Fail":          2,
	"AccessDenied":  3,
}

func (x CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult) Enum() *CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult {
	p := new(CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult)
	*p = x
	return p
}
func (x CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult) String() string {
	return proto.EnumName(CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_name, int32(x))
}
func (x *CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_value, data, "CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult")
	if err != nil {
		return err
	}
	*x = CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult(value)
	return nil
}
func (CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 0}
}

type DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult int32

const (
	DeletePersistentSubscriptionCompleted_Success      DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult = 0
	DeletePersistentSubscriptionCompleted_DoesNotExist DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult = 1
	DeletePersistentSubscriptionCompleted_Fail         DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult = 2
	DeletePersistentSubscriptionCompleted_AccessDenied DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult = 3
)

var DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_name = map[int32]string{
	0: "Success",
	1: "DoesNotExist",
	2: "Fail",
	3: "AccessDenied",
}
var DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_value = map[string]int32{
	"Success":      0,
	"DoesNotExist": 1,
	"Fail":         2,
	"AccessDenied": 3,
}

func (x DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult) Enum() *DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult {
	p := new(DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult)
	*p = x
	return p
}
func (x DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult) String() string {
	return proto.EnumName(DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_name, int32(x))
}
func (x *DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_value, data, "DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult")
	if err != nil {
		return err
	}
	*x = DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult(value)
	return nil
}
func (DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

type PersistentSubscriptionNakEvents_NakAction int32

const (
	PersistentSubscriptionNakEvents_Unknown PersistentSubscriptionNakEvents_NakAction = 0
	PersistentSubscriptionNakEvents_Park    PersistentSubscriptionNakEvents_NakAction = 1
	PersistentSubscriptionNakEvents_Retry   PersistentSubscriptionNakEvents_NakAction = 2
	PersistentSubscriptionNakEvents_Skip    PersistentSubscriptionNakEvents_NakAction = 3
	PersistentSubscriptionNakEvents_Stop    PersistentSubscriptionNakEvents_NakAction = 4
)

var PersistentSubscriptionNakEvents_NakAction_name = map[int32]string{
	0: "Unknown",
	1: "Park",
	2: "Retry",
	3: "Skip",
	4: "Stop",
}
var PersistentSubscriptionNakEvents_NakAction_value = map[string]int32{
	"Unknown": 0,
	"Park":    1,
	"Retry":   2,
	"Skip":    3,
	"Stop":    4,
}

func (x PersistentSubscriptionNakEvents_NakAction) Enum() *PersistentSubscriptionNakEvents_NakAction {
	p := new(PersistentSubscriptionNakEvents_NakAction)
	*p = x
	return p
}
func (x PersistentSubscriptionNakEvents_NakAction) String() string {
	return proto.EnumName(PersistentSubscriptionNakEvents_NakAction_name, int32(x))
}
func (x *PersistentSubscriptionNakEvents_NakAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PersistentSubscriptionNakEvents_NakAction_value, data, "PersistentSubscriptionNakEvents_NakAction")
	if err != nil {
		return err
	}
	*x = PersistentSubscriptionNakEvents_NakAction(value)
	return nil
}
func (PersistentSubscriptionNakEvents_NakAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28, 0}
}

type SubscriptionDropped_SubscriptionDropReason int32

const (
	SubscriptionDropped_Unsubscribed                  SubscriptionDropped_SubscriptionDropReason = 0
	SubscriptionDropped_AccessDenied                  SubscriptionDropped_SubscriptionDropReason = 1
	SubscriptionDropped_NotFound                      SubscriptionDropped_SubscriptionDropReason = 2
	SubscriptionDropped_PersistentSubscriptionDeleted SubscriptionDropped_SubscriptionDropReason = 3
	SubscriptionDropped_SubscriberMaxCountReached     SubscriptionDropped_SubscriptionDropReason = 4
)

var SubscriptionDropped_SubscriptionDropReason_name = map[int32]string{
	0: "Unsubscribed",
	1: "AccessDenied",
	2: "NotFound",
	3: "PersistentSubscriptionDeleted",
	4: "SubscriberMaxCountReached",
}
var SubscriptionDropped_SubscriptionDropReason_value = map[string]int32{
	"Unsubscribed":                  0,
	"AccessDenied":                  1,
	"NotFound":                      2,
	"PersistentSubscriptionDeleted": 3,
	"SubscriberMaxCountReached":     4,
}

func (x SubscriptionDropped_SubscriptionDropReason) Enum() *SubscriptionDropped_SubscriptionDropReason {
	p := new(SubscriptionDropped_SubscriptionDropReason)
	*p = x
	return p
}
func (x SubscriptionDropped_SubscriptionDropReason) String() string {
	return proto.EnumName(SubscriptionDropped_SubscriptionDropReason_name, int32(x))
}
func (x *SubscriptionDropped_SubscriptionDropReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SubscriptionDropped_SubscriptionDropReason_value, data, "SubscriptionDropped_SubscriptionDropReason")
	if err != nil {
		return err
	}
	*x = SubscriptionDropped_SubscriptionDropReason(value)
	return nil
}
func (SubscriptionDropped_SubscriptionDropReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0}
}

type NotHandled_NotHandledReason int32

const (
	NotHandled_NotReady  NotHandled_NotHandledReason = 0
	NotHandled_TooBusy   NotHandled_NotHandledReason = 1
	NotHandled_NotMaster NotHandled_NotHandledReason = 2
)

var NotHandled_NotHandledReason_name = map[int32]string{
	0: "NotReady",
	1: "TooBusy",
	2: "NotMaster",
}
var NotHandled_NotHandledReason_value = map[string]int32{
	"NotReady":  0,
	"TooBusy":   1,
	"NotMaster": 2,
}

func (x NotHandled_NotHandledReason) Enum() *NotHandled_NotHandledReason {
	p := new(NotHandled_NotHandledReason)
	*p = x
	return p
}
func (x NotHandled_NotHandledReason) String() string {
	return proto.EnumName(NotHandled_NotHandledReason_name, int32(x))
}
func (x *NotHandled_NotHandledReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NotHandled_NotHandledReason_value, data, "NotHandled_NotHandledReason")
	if err != nil {
		return err
	}
	*x = NotHandled_NotHandledReason(value)
	return nil
}
func (NotHandled_NotHandledReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36, 0}
}

type ScavengeDatabaseCompleted_ScavengeResult int32

const (
	ScavengeDatabaseCompleted_Success    ScavengeDatabaseCompleted_ScavengeResult = 0
	ScavengeDatabaseCompleted_InProgress ScavengeDatabaseCompleted_ScavengeResult = 1
	ScavengeDatabaseCompleted_Failed     ScavengeDatabaseCompleted_ScavengeResult = 2
)

var ScavengeDatabaseCompleted_ScavengeResult_name = map[int32]string{
	0: "Success",
	1: "InProgress",
	2: "Failed",
}
var ScavengeDatabaseCompleted_ScavengeResult_value = map[string]int32{
	"Success":    0,
	"InProgress": 1,
	"Failed":     2,
}

func (x ScavengeDatabaseCompleted_ScavengeResult) Enum() *ScavengeDatabaseCompleted_ScavengeResult {
	p := new(ScavengeDatabaseCompleted_ScavengeResult)
	*p = x
	return p
}
func (x ScavengeDatabaseCompleted_ScavengeResult) String() string {
	return proto.EnumName(ScavengeDatabaseCompleted_ScavengeResult_name, int32(x))
}
func (x *ScavengeDatabaseCompleted_ScavengeResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScavengeDatabaseCompleted_ScavengeResult_value, data, "ScavengeDatabaseCompleted_ScavengeResult")
	if err != nil {
		return err
	}
	*x = ScavengeDatabaseCompleted_ScavengeResult(value)
	return nil
}
func (ScavengeDatabaseCompleted_ScavengeResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38, 0}
}

type NewEvent struct {
	EventId             []byte  `protobuf:"bytes,1,req,name=event_id" json:"event_id,omitempty"`
	EventType           *string `protobuf:"bytes,2,req,name=event_type" json:"event_type,omitempty"`
	DataContentType     *int32  `protobuf:"varint,3,req,name=data_content_type" json:"data_content_type,omitempty"`
	MetadataContentType *int32  `protobuf:"varint,4,req,name=metadata_content_type" json:"metadata_content_type,omitempty"`
	Data                []byte  `protobuf:"bytes,5,req,name=data" json:"data,omitempty"`
	Metadata            []byte  `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *NewEvent) Reset()                    { *m = NewEvent{} }
func (m *NewEvent) String() string            { return proto.CompactTextString(m) }
func (*NewEvent) ProtoMessage()               {}
func (*NewEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewEvent) GetEventId() []byte {
	if m != nil {
		return m.EventId
	}
	return nil
}

func (m *NewEvent) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *NewEvent) GetDataContentType() int32 {
	if m != nil && m.DataContentType != nil {
		return *m.DataContentType
	}
	return 0
}

func (m *NewEvent) GetMetadataContentType() int32 {
	if m != nil && m.MetadataContentType != nil {
		return *m.MetadataContentType
	}
	return 0
}

func (m *NewEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NewEvent) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventRecord struct {
	EventStreamId       *string `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	EventNumber         *int32  `protobuf:"varint,2,req,name=event_number" json:"event_number,omitempty"`
	EventId             []byte  `protobuf:"bytes,3,req,name=event_id" json:"event_id,omitempty"`
	EventType           *string `protobuf:"bytes,4,req,name=event_type" json:"event_type,omitempty"`
	DataContentType     *int32  `protobuf:"varint,5,req,name=data_content_type" json:"data_content_type,omitempty"`
	MetadataContentType *int32  `protobuf:"varint,6,req,name=metadata_content_type" json:"metadata_content_type,omitempty"`
	Data                []byte  `protobuf:"bytes,7,req,name=data" json:"data,omitempty"`
	Metadata            []byte  `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	Created             *int64  `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	CreatedEpoch        *int64  `protobuf:"varint,10,opt,name=created_epoch" json:"created_epoch,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *EventRecord) Reset()                    { *m = EventRecord{} }
func (m *EventRecord) String() string            { return proto.CompactTextString(m) }
func (*EventRecord) ProtoMessage()               {}
func (*EventRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventRecord) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *EventRecord) GetEventNumber() int32 {
	if m != nil && m.EventNumber != nil {
		return *m.EventNumber
	}
	return 0
}

func (m *EventRecord) GetEventId() []byte {
	if m != nil {
		return m.EventId
	}
	return nil
}

func (m *EventRecord) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *EventRecord) GetDataContentType() int32 {
	if m != nil && m.DataContentType != nil {
		return *m.DataContentType
	}
	return 0
}

func (m *EventRecord) GetMetadataContentType() int32 {
	if m != nil && m.MetadataContentType != nil {
		return *m.MetadataContentType
	}
	return 0
}

func (m *EventRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventRecord) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventRecord) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *EventRecord) GetCreatedEpoch() int64 {
	if m != nil && m.CreatedEpoch != nil {
		return *m.CreatedEpoch
	}
	return 0
}

type ResolvedIndexedEvent struct {
	Event            *EventRecord `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Link             *EventRecord `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ResolvedIndexedEvent) Reset()                    { *m = ResolvedIndexedEvent{} }
func (m *ResolvedIndexedEvent) String() string            { return proto.CompactTextString(m) }
func (*ResolvedIndexedEvent) ProtoMessage()               {}
func (*ResolvedIndexedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResolvedIndexedEvent) GetEvent() *EventRecord {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ResolvedIndexedEvent) GetLink() *EventRecord {
	if m != nil {
		return m.Link
	}
	return nil
}

type ResolvedEvent struct {
	Event            *EventRecord `protobuf:"bytes,1,req,name=event" json:"event,omitempty"`
	Link             *EventRecord `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	CommitPosition   *int64       `protobuf:"varint,3,req,name=commit_position" json:"commit_position,omitempty"`
	PreparePosition  *int64       `protobuf:"varint,4,req,name=prepare_position" json:"prepare_position,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ResolvedEvent) Reset()                    { *m = ResolvedEvent{} }
func (m *ResolvedEvent) String() string            { return proto.CompactTextString(m) }
func (*ResolvedEvent) ProtoMessage()               {}
func (*ResolvedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResolvedEvent) GetEvent() *EventRecord {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ResolvedEvent) GetLink() *EventRecord {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *ResolvedEvent) GetCommitPosition() int64 {
	if m != nil && m.CommitPosition != nil {
		return *m.CommitPosition
	}
	return 0
}

func (m *ResolvedEvent) GetPreparePosition() int64 {
	if m != nil && m.PreparePosition != nil {
		return *m.PreparePosition
	}
	return 0
}

type WriteEvents struct {
	EventStreamId    *string     `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	ExpectedVersion  *int32      `protobuf:"varint,2,req,name=expected_version" json:"expected_version,omitempty"`
	Events           []*NewEvent `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	RequireMaster    *bool       `protobuf:"varint,4,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *WriteEvents) Reset()                    { *m = WriteEvents{} }
func (m *WriteEvents) String() string            { return proto.CompactTextString(m) }
func (*WriteEvents) ProtoMessage()               {}
func (*WriteEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WriteEvents) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *WriteEvents) GetExpectedVersion() int32 {
	if m != nil && m.ExpectedVersion != nil {
		return *m.ExpectedVersion
	}
	return 0
}

func (m *WriteEvents) GetEvents() []*NewEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *WriteEvents) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type WriteEventsCompleted struct {
	Result           *OperationResult `protobuf:"varint,1,req,name=result,enum=messages.OperationResult" json:"result,omitempty"`
	Message          *string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	FirstEventNumber *int32           `protobuf:"varint,3,req,name=first_event_number" json:"first_event_number,omitempty"`
	LastEventNumber  *int32           `protobuf:"varint,4,req,name=last_event_number" json:"last_event_number,omitempty"`
	PreparePosition  *int64           `protobuf:"varint,5,opt,name=prepare_position" json:"prepare_position,omitempty"`
	CommitPosition   *int64           `protobuf:"varint,6,opt,name=commit_position" json:"commit_position,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *WriteEventsCompleted) Reset()                    { *m = WriteEventsCompleted{} }
func (m *WriteEventsCompleted) String() string            { return proto.CompactTextString(m) }
func (*WriteEventsCompleted) ProtoMessage()               {}
func (*WriteEventsCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WriteEventsCompleted) GetResult() OperationResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return OperationResult_Success
}

func (m *WriteEventsCompleted) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *WriteEventsCompleted) GetFirstEventNumber() int32 {
	if m != nil && m.FirstEventNumber != nil {
		return *m.FirstEventNumber
	}
	return 0
}

func (m *WriteEventsCompleted) GetLastEventNumber() int32 {
	if m != nil && m.LastEventNumber != nil {
		return *m.LastEventNumber
	}
	return 0
}

func (m *WriteEventsCompleted) GetPreparePosition() int64 {
	if m != nil && m.PreparePosition != nil {
		return *m.PreparePosition
	}
	return 0
}

func (m *WriteEventsCompleted) GetCommitPosition() int64 {
	if m != nil && m.CommitPosition != nil {
		return *m.CommitPosition
	}
	return 0
}

type DeleteStream struct {
	EventStreamId    *string `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	ExpectedVersion  *int32  `protobuf:"varint,2,req,name=expected_version" json:"expected_version,omitempty"`
	RequireMaster    *bool   `protobuf:"varint,3,req,name=require_master" json:"require_master,omitempty"`
	HardDelete       *bool   `protobuf:"varint,4,opt,name=hard_delete" json:"hard_delete,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteStream) Reset()                    { *m = DeleteStream{} }
func (m *DeleteStream) String() string            { return proto.CompactTextString(m) }
func (*DeleteStream) ProtoMessage()               {}
func (*DeleteStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteStream) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *DeleteStream) GetExpectedVersion() int32 {
	if m != nil && m.ExpectedVersion != nil {
		return *m.ExpectedVersion
	}
	return 0
}

func (m *DeleteStream) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

func (m *DeleteStream) GetHardDelete() bool {
	if m != nil && m.HardDelete != nil {
		return *m.HardDelete
	}
	return false
}

type DeleteStreamCompleted struct {
	Result           *OperationResult `protobuf:"varint,1,req,name=result,enum=messages.OperationResult" json:"result,omitempty"`
	Message          *string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	PreparePosition  *int64           `protobuf:"varint,3,opt,name=prepare_position" json:"prepare_position,omitempty"`
	CommitPosition   *int64           `protobuf:"varint,4,opt,name=commit_position" json:"commit_position,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DeleteStreamCompleted) Reset()                    { *m = DeleteStreamCompleted{} }
func (m *DeleteStreamCompleted) String() string            { return proto.CompactTextString(m) }
func (*DeleteStreamCompleted) ProtoMessage()               {}
func (*DeleteStreamCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteStreamCompleted) GetResult() OperationResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return OperationResult_Success
}

func (m *DeleteStreamCompleted) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *DeleteStreamCompleted) GetPreparePosition() int64 {
	if m != nil && m.PreparePosition != nil {
		return *m.PreparePosition
	}
	return 0
}

func (m *DeleteStreamCompleted) GetCommitPosition() int64 {
	if m != nil && m.CommitPosition != nil {
		return *m.CommitPosition
	}
	return 0
}

type TransactionStart struct {
	EventStreamId    *string `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	ExpectedVersion  *int32  `protobuf:"varint,2,req,name=expected_version" json:"expected_version,omitempty"`
	RequireMaster    *bool   `protobuf:"varint,3,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TransactionStart) Reset()                    { *m = TransactionStart{} }
func (m *TransactionStart) String() string            { return proto.CompactTextString(m) }
func (*TransactionStart) ProtoMessage()               {}
func (*TransactionStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TransactionStart) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *TransactionStart) GetExpectedVersion() int32 {
	if m != nil && m.ExpectedVersion != nil {
		return *m.ExpectedVersion
	}
	return 0
}

func (m *TransactionStart) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type TransactionStartCompleted struct {
	TransactionId    *int64           `protobuf:"varint,1,req,name=transaction_id" json:"transaction_id,omitempty"`
	Result           *OperationResult `protobuf:"varint,2,req,name=result,enum=messages.OperationResult" json:"result,omitempty"`
	Message          *string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TransactionStartCompleted) Reset()                    { *m = TransactionStartCompleted{} }
func (m *TransactionStartCompleted) String() string            { return proto.CompactTextString(m) }
func (*TransactionStartCompleted) ProtoMessage()               {}
func (*TransactionStartCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TransactionStartCompleted) GetTransactionId() int64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *TransactionStartCompleted) GetResult() OperationResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return OperationResult_Success
}

func (m *TransactionStartCompleted) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type TransactionWrite struct {
	TransactionId    *int64      `protobuf:"varint,1,req,name=transaction_id" json:"transaction_id,omitempty"`
	Events           []*NewEvent `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	RequireMaster    *bool       `protobuf:"varint,3,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TransactionWrite) Reset()                    { *m = TransactionWrite{} }
func (m *TransactionWrite) String() string            { return proto.CompactTextString(m) }
func (*TransactionWrite) ProtoMessage()               {}
func (*TransactionWrite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TransactionWrite) GetTransactionId() int64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *TransactionWrite) GetEvents() []*NewEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *TransactionWrite) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type TransactionWriteCompleted struct {
	TransactionId    *int64           `protobuf:"varint,1,req,name=transaction_id" json:"transaction_id,omitempty"`
	Result           *OperationResult `protobuf:"varint,2,req,name=result,enum=messages.OperationResult" json:"result,omitempty"`
	Message          *string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TransactionWriteCompleted) Reset()                    { *m = TransactionWriteCompleted{} }
func (m *TransactionWriteCompleted) String() string            { return proto.CompactTextString(m) }
func (*TransactionWriteCompleted) ProtoMessage()               {}
func (*TransactionWriteCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TransactionWriteCompleted) GetTransactionId() int64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *TransactionWriteCompleted) GetResult() OperationResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return OperationResult_Success
}

func (m *TransactionWriteCompleted) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type TransactionCommit struct {
	TransactionId    *int64 `protobuf:"varint,1,req,name=transaction_id" json:"transaction_id,omitempty"`
	RequireMaster    *bool  `protobuf:"varint,2,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TransactionCommit) Reset()                    { *m = TransactionCommit{} }
func (m *TransactionCommit) String() string            { return proto.CompactTextString(m) }
func (*TransactionCommit) ProtoMessage()               {}
func (*TransactionCommit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TransactionCommit) GetTransactionId() int64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *TransactionCommit) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type TransactionCommitCompleted struct {
	TransactionId    *int64           `protobuf:"varint,1,req,name=transaction_id" json:"transaction_id,omitempty"`
	Result           *OperationResult `protobuf:"varint,2,req,name=result,enum=messages.OperationResult" json:"result,omitempty"`
	Message          *string          `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	FirstEventNumber *int32           `protobuf:"varint,4,req,name=first_event_number" json:"first_event_number,omitempty"`
	LastEventNumber  *int32           `protobuf:"varint,5,req,name=last_event_number" json:"last_event_number,omitempty"`
	PreparePosition  *int64           `protobuf:"varint,6,opt,name=prepare_position" json:"prepare_position,omitempty"`
	CommitPosition   *int64           `protobuf:"varint,7,opt,name=commit_position" json:"commit_position,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *TransactionCommitCompleted) Reset()                    { *m = TransactionCommitCompleted{} }
func (m *TransactionCommitCompleted) String() string            { return proto.CompactTextString(m) }
func (*TransactionCommitCompleted) ProtoMessage()               {}
func (*TransactionCommitCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TransactionCommitCompleted) GetTransactionId() int64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *TransactionCommitCompleted) GetResult() OperationResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return OperationResult_Success
}

func (m *TransactionCommitCompleted) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TransactionCommitCompleted) GetFirstEventNumber() int32 {
	if m != nil && m.FirstEventNumber != nil {
		return *m.FirstEventNumber
	}
	return 0
}

func (m *TransactionCommitCompleted) GetLastEventNumber() int32 {
	if m != nil && m.LastEventNumber != nil {
		return *m.LastEventNumber
	}
	return 0
}

func (m *TransactionCommitCompleted) GetPreparePosition() int64 {
	if m != nil && m.PreparePosition != nil {
		return *m.PreparePosition
	}
	return 0
}

func (m *TransactionCommitCompleted) GetCommitPosition() int64 {
	if m != nil && m.CommitPosition != nil {
		return *m.CommitPosition
	}
	return 0
}

type ReadEvent struct {
	EventStreamId    *string `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	EventNumber      *int32  `protobuf:"varint,2,req,name=event_number" json:"event_number,omitempty"`
	ResolveLinkTos   *bool   `protobuf:"varint,3,req,name=resolve_link_tos" json:"resolve_link_tos,omitempty"`
	RequireMaster    *bool   `protobuf:"varint,4,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadEvent) Reset()                    { *m = ReadEvent{} }
func (m *ReadEvent) String() string            { return proto.CompactTextString(m) }
func (*ReadEvent) ProtoMessage()               {}
func (*ReadEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReadEvent) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *ReadEvent) GetEventNumber() int32 {
	if m != nil && m.EventNumber != nil {
		return *m.EventNumber
	}
	return 0
}

func (m *ReadEvent) GetResolveLinkTos() bool {
	if m != nil && m.ResolveLinkTos != nil {
		return *m.ResolveLinkTos
	}
	return false
}

func (m *ReadEvent) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type ReadEventCompleted struct {
	Result           *ReadEventCompleted_ReadEventResult `protobuf:"varint,1,req,name=result,enum=messages.ReadEventCompleted_ReadEventResult" json:"result,omitempty"`
	Event            *ResolvedIndexedEvent               `protobuf:"bytes,2,req,name=event" json:"event,omitempty"`
	Error            *string                             `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *ReadEventCompleted) Reset()                    { *m = ReadEventCompleted{} }
func (m *ReadEventCompleted) String() string            { return proto.CompactTextString(m) }
func (*ReadEventCompleted) ProtoMessage()               {}
func (*ReadEventCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadEventCompleted) GetResult() ReadEventCompleted_ReadEventResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReadEventCompleted_Success
}

func (m *ReadEventCompleted) GetEvent() *ResolvedIndexedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ReadEventCompleted) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type ReadStreamEvents struct {
	EventStreamId    *string `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	FromEventNumber  *int32  `protobuf:"varint,2,req,name=from_event_number" json:"from_event_number,omitempty"`
	MaxCount         *int32  `protobuf:"varint,3,req,name=max_count" json:"max_count,omitempty"`
	ResolveLinkTos   *bool   `protobuf:"varint,4,req,name=resolve_link_tos" json:"resolve_link_tos,omitempty"`
	RequireMaster    *bool   `protobuf:"varint,5,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReadStreamEvents) Reset()                    { *m = ReadStreamEvents{} }
func (m *ReadStreamEvents) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamEvents) ProtoMessage()               {}
func (*ReadStreamEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReadStreamEvents) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *ReadStreamEvents) GetFromEventNumber() int32 {
	if m != nil && m.FromEventNumber != nil {
		return *m.FromEventNumber
	}
	return 0
}

func (m *ReadStreamEvents) GetMaxCount() int32 {
	if m != nil && m.MaxCount != nil {
		return *m.MaxCount
	}
	return 0
}

func (m *ReadStreamEvents) GetResolveLinkTos() bool {
	if m != nil && m.ResolveLinkTos != nil {
		return *m.ResolveLinkTos
	}
	return false
}

func (m *ReadStreamEvents) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type ReadStreamEventsCompleted struct {
	Events             []*ResolvedIndexedEvent                     `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Result             *ReadStreamEventsCompleted_ReadStreamResult `protobuf:"varint,2,req,name=result,enum=messages.ReadStreamEventsCompleted_ReadStreamResult" json:"result,omitempty"`
	NextEventNumber    *int32                                      `protobuf:"varint,3,req,name=next_event_number" json:"next_event_number,omitempty"`
	LastEventNumber    *int32                                      `protobuf:"varint,4,req,name=last_event_number" json:"last_event_number,omitempty"`
	IsEndOfStream      *bool                                       `protobuf:"varint,5,req,name=is_end_of_stream" json:"is_end_of_stream,omitempty"`
	LastCommitPosition *int64                                      `protobuf:"varint,6,req,name=last_commit_position" json:"last_commit_position,omitempty"`
	Error              *string                                     `protobuf:"bytes,7,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized   []byte                                      `json:"-"`
}

func (m *ReadStreamEventsCompleted) Reset()                    { *m = ReadStreamEventsCompleted{} }
func (m *ReadStreamEventsCompleted) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamEventsCompleted) ProtoMessage()               {}
func (*ReadStreamEventsCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ReadStreamEventsCompleted) GetEvents() []*ResolvedIndexedEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ReadStreamEventsCompleted) GetResult() ReadStreamEventsCompleted_ReadStreamResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ReadStreamEventsCompleted_Success
}

func (m *ReadStreamEventsCompleted) GetNextEventNumber() int32 {
	if m != nil && m.NextEventNumber != nil {
		return *m.NextEventNumber
	}
	return 0
}

func (m *ReadStreamEventsCompleted) GetLastEventNumber() int32 {
	if m != nil && m.LastEventNumber != nil {
		return *m.LastEventNumber
	}
	return 0
}

func (m *ReadStreamEventsCompleted) GetIsEndOfStream() bool {
	if m != nil && m.IsEndOfStream != nil {
		return *m.IsEndOfStream
	}
	return false
}

func (m *ReadStreamEventsCompleted) GetLastCommitPosition() int64 {
	if m != nil && m.LastCommitPosition != nil {
		return *m.LastCommitPosition
	}
	return 0
}

func (m *ReadStreamEventsCompleted) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type ReadAllEvents struct {
	CommitPosition   *int64 `protobuf:"varint,1,req,name=commit_position" json:"commit_position,omitempty"`
	PreparePosition  *int64 `protobuf:"varint,2,req,name=prepare_position" json:"prepare_position,omitempty"`
	MaxCount         *int32 `protobuf:"varint,3,req,name=max_count" json:"max_count,omitempty"`
	ResolveLinkTos   *bool  `protobuf:"varint,4,req,name=resolve_link_tos" json:"resolve_link_tos,omitempty"`
	RequireMaster    *bool  `protobuf:"varint,5,req,name=require_master" json:"require_master,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReadAllEvents) Reset()                    { *m = ReadAllEvents{} }
func (m *ReadAllEvents) String() string            { return proto.CompactTextString(m) }
func (*ReadAllEvents) ProtoMessage()               {}
func (*ReadAllEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReadAllEvents) GetCommitPosition() int64 {
	if m != nil && m.CommitPosition != nil {
		return *m.CommitPosition
	}
	return 0
}

func (m *ReadAllEvents) GetPreparePosition() int64 {
	if m != nil && m.PreparePosition != nil {
		return *m.PreparePosition
	}
	return 0
}

func (m *ReadAllEvents) GetMaxCount() int32 {
	if m != nil && m.MaxCount != nil {
		return *m.MaxCount
	}
	return 0
}

func (m *ReadAllEvents) GetResolveLinkTos() bool {
	if m != nil && m.ResolveLinkTos != nil {
		return *m.ResolveLinkTos
	}
	return false
}

func (m *ReadAllEvents) GetRequireMaster() bool {
	if m != nil && m.RequireMaster != nil {
		return *m.RequireMaster
	}
	return false
}

type ReadAllEventsCompleted struct {
	CommitPosition      *int64                                `protobuf:"varint,1,req,name=commit_position" json:"commit_position,omitempty"`
	PreparePosition     *int64                                `protobuf:"varint,2,req,name=prepare_position" json:"prepare_position,omitempty"`
	Events              []*ResolvedEvent                      `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	NextCommitPosition  *int64                                `protobuf:"varint,4,req,name=next_commit_position" json:"next_commit_position,omitempty"`
	NextPreparePosition *int64                                `protobuf:"varint,5,req,name=next_prepare_position" json:"next_prepare_position,omitempty"`
	Result              *ReadAllEventsCompleted_ReadAllResult `protobuf:"varint,6,opt,name=result,enum=messages.ReadAllEventsCompleted_ReadAllResult,def=0" json:"result,omitempty"`
	Error               *string                               `protobuf:"bytes,7,opt,name=error" json:"error,omitempty"`
	XXX_unrecognized    []byte                                `json:"-"`
}

func (m *ReadAllEventsCompleted) Reset()                    { *m = ReadAllEventsCompleted{} }
func (m *ReadAllEventsCompleted) String() string            { return proto.CompactTextString(m) }
func (*ReadAllEventsCompleted) ProtoMessage()               {}
func (*ReadAllEventsCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

const Default_ReadAllEventsCompleted_Result ReadAllEventsCompleted_ReadAllResult = ReadAllEventsCompleted_Success

func (m *ReadAllEventsCompleted) GetCommitPosition() int64 {
	if m != nil && m.CommitPosition != nil {
		return *m.CommitPosition
	}
	return 0
}

func (m *ReadAllEventsCompleted) GetPreparePosition() int64 {
	if m != nil && m.PreparePosition != nil {
		return *m.PreparePosition
	}
	return 0
}

func (m *ReadAllEventsCompleted) GetEvents() []*ResolvedEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ReadAllEventsCompleted) GetNextCommitPosition() int64 {
	if m != nil && m.NextCommitPosition != nil {
		return *m.NextCommitPosition
	}
	return 0
}

func (m *ReadAllEventsCompleted) GetNextPreparePosition() int64 {
	if m != nil && m.NextPreparePosition != nil {
		return *m.NextPreparePosition
	}
	return 0
}

func (m *ReadAllEventsCompleted) GetResult() ReadAllEventsCompleted_ReadAllResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_ReadAllEventsCompleted_Result
}

func (m *ReadAllEventsCompleted) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

type CreatePersistentSubscription struct {
	SubscriptionGroupName      *string `protobuf:"bytes,1,req,name=subscription_group_name" json:"subscription_group_name,omitempty"`
	EventStreamId              *string `protobuf:"bytes,2,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	ResolveLinkTos             *bool   `protobuf:"varint,3,req,name=resolve_link_tos" json:"resolve_link_tos,omitempty"`
	StartFrom                  *int32  `protobuf:"varint,4,req,name=start_from" json:"start_from,omitempty"`
	MessageTimeoutMilliseconds *int32  `protobuf:"varint,5,req,name=message_timeout_milliseconds" json:"message_timeout_milliseconds,omitempty"`
	RecordStatistics           *bool   `protobuf:"varint,6,req,name=record_statistics" json:"record_statistics,omitempty"`
	LiveBufferSize             *int32  `protobuf:"varint,7,req,name=live_buffer_size" json:"live_buffer_size,omitempty"`
	ReadBatchSize              *int32  `protobuf:"varint,8,req,name=read_batch_size" json:"read_batch_size,omitempty"`
	BufferSize                 *int32  `protobuf:"varint,9,req,name=buffer_size" json:"buffer_size,omitempty"`
	MaxRetryCount              *int32  `protobuf:"varint,10,req,name=max_retry_count" json:"max_retry_count,omitempty"`
	PreferRoundRobin           *bool   `protobuf:"varint,11,req,name=prefer_round_robin" json:"prefer_round_robin,omitempty"`
	CheckpointAfterTime        *int32  `protobuf:"varint,12,req,name=checkpoint_after_time" json:"checkpoint_after_time,omitempty"`
	CheckpointMaxCount         *int32  `protobuf:"varint,13,req,name=checkpoint_max_count" json:"checkpoint_max_count,omitempty"`
	CheckpointMinCount         *int32  `protobuf:"varint,14,req,name=checkpoint_min_count" json:"checkpoint_min_count,omitempty"`
	SubscriberMaxCount         *int32  `protobuf:"varint,15,req,name=subscriber_max_count" json:"subscriber_max_count,omitempty"`
	NamedConsumerStrategy      *string `protobuf:"bytes,16,opt,name=named_consumer_strategy" json:"named_consumer_strategy,omitempty"`
	XXX_unrecognized           []byte  `json:"-"`
}

func (m *CreatePersistentSubscription) Reset()                    { *m = CreatePersistentSubscription{} }
func (m *CreatePersistentSubscription) String() string            { return proto.CompactTextString(m) }
func (*CreatePersistentSubscription) ProtoMessage()               {}
func (*CreatePersistentSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreatePersistentSubscription) GetSubscriptionGroupName() string {
	if m != nil && m.SubscriptionGroupName != nil {
		return *m.SubscriptionGroupName
	}
	return ""
}

func (m *CreatePersistentSubscription) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *CreatePersistentSubscription) GetResolveLinkTos() bool {
	if m != nil && m.ResolveLinkTos != nil {
		return *m.ResolveLinkTos
	}
	return false
}

func (m *CreatePersistentSubscription) GetStartFrom() int32 {
	if m != nil && m.StartFrom != nil {
		return *m.StartFrom
	}
	return 0
}

func (m *CreatePersistentSubscription) GetMessageTimeoutMilliseconds() int32 {
	if m != nil && m.MessageTimeoutMilliseconds != nil {
		return *m.MessageTimeoutMilliseconds
	}
	return 0
}

func (m *CreatePersistentSubscription) GetRecordStatistics() bool {
	if m != nil && m.RecordStatistics != nil {
		return *m.RecordStatistics
	}
	return false
}

func (m *CreatePersistentSubscription) GetLiveBufferSize() int32 {
	if m != nil && m.LiveBufferSize != nil {
		return *m.LiveBufferSize
	}
	return 0
}

func (m *CreatePersistentSubscription) GetReadBatchSize() int32 {
	if m != nil && m.ReadBatchSize != nil {
		return *m.ReadBatchSize
	}
	return 0
}

func (m *CreatePersistentSubscription) GetBufferSize() int32 {
	if m != nil && m.BufferSize != nil {
		return *m.BufferSize
	}
	return 0
}

func (m *CreatePersistentSubscription) GetMaxRetryCount() int32 {
	if m != nil && m.MaxRetryCount != nil {
		return *m.MaxRetryCount
	}
	return 0
}

func (m *CreatePersistentSubscription) GetPreferRoundRobin() bool {
	if m != nil && m.PreferRoundRobin != nil {
		return *m.PreferRoundRobin
	}
	return false
}

func (m *CreatePersistentSubscription) GetCheckpointAfterTime() int32 {
	if m != nil && m.CheckpointAfterTime != nil {
		return *m.CheckpointAfterTime
	}
	return 0
}

func (m *CreatePersistentSubscription) GetCheckpointMaxCount() int32 {
	if m != nil && m.CheckpointMaxCount != nil {
		return *m.CheckpointMaxCount
	}
	return 0
}

func (m *CreatePersistentSubscription) GetCheckpointMinCount() int32 {
	if m != nil && m.CheckpointMinCount != nil {
		return *m.CheckpointMinCount
	}
	return 0
}

func (m *CreatePersistentSubscription) GetSubscriberMaxCount() int32 {
	if m != nil && m.SubscriberMaxCount != nil {
		return *m.SubscriberMaxCount
	}
	return 0
}

func (m *CreatePersistentSubscription) GetNamedConsumerStrategy() string {
	if m != nil && m.NamedConsumerStrategy != nil {
		return *m.NamedConsumerStrategy
	}
	return ""
}

type DeletePersistentSubscription struct {
	SubscriptionGroupName *string `protobuf:"bytes,1,req,name=subscription_group_name" json:"subscription_group_name,omitempty"`
	EventStreamId         *string `protobuf:"bytes,2,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *DeletePersistentSubscription) Reset()                    { *m = DeletePersistentSubscription{} }
func (m *DeletePersistentSubscription) String() string            { return proto.CompactTextString(m) }
func (*DeletePersistentSubscription) ProtoMessage()               {}
func (*DeletePersistentSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeletePersistentSubscription) GetSubscriptionGroupName() string {
	if m != nil && m.SubscriptionGroupName != nil {
		return *m.SubscriptionGroupName
	}
	return ""
}

func (m *DeletePersistentSubscription) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

type UpdatePersistentSubscription struct {
	SubscriptionGroupName      *string `protobuf:"bytes,1,req,name=subscription_group_name" json:"subscription_group_name,omitempty"`
	EventStreamId              *string `protobuf:"bytes,2,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	ResolveLinkTos             *bool   `protobuf:"varint,3,req,name=resolve_link_tos" json:"resolve_link_tos,omitempty"`
	StartFrom                  *int32  `protobuf:"varint,4,req,name=start_from" json:"start_from,omitempty"`
	MessageTimeoutMilliseconds *int32  `protobuf:"varint,5,req,name=message_timeout_milliseconds" json:"message_timeout_milliseconds,omitempty"`
	RecordStatistics           *bool   `protobuf:"varint,6,req,name=record_statistics" json:"record_statistics,omitempty"`
	LiveBufferSize             *int32  `protobuf:"varint,7,req,name=live_buffer_size" json:"live_buffer_size,omitempty"`
	ReadBatchSize              *int32  `protobuf:"varint,8,req,name=read_batch_size" json:"read_batch_size,omitempty"`
	BufferSize                 *int32  `protobuf:"varint,9,req,name=buffer_size" json:"buffer_size,omitempty"`
	MaxRetryCount              *int32  `protobuf:"varint,10,req,name=max_retry_count" json:"max_retry_count,omitempty"`
	PreferRoundRobin           *bool   `protobuf:"varint,11,req,name=prefer_round_robin" json:"prefer_round_robin,omitempty"`
	CheckpointAfterTime        *int32  `protobuf:"varint,12,req,name=checkpoint_after_time" json:"checkpoint_after_time,omitempty"`
	CheckpointMaxCount         *int32  `protobuf:"varint,13,req,name=checkpoint_max_count" json:"checkpoint_max_count,omitempty"`
	CheckpointMinCount         *int32  `protobuf:"varint,14,req,name=checkpoint_min_count" json:"checkpoint_min_count,omitempty"`
	SubscriberMaxCount         *int32  `protobuf:"varint,15,req,name=subscriber_max_count" json:"subscriber_max_count,omitempty"`
	NamedConsumerStrategy      *string `protobuf:"bytes,16,opt,name=named_consumer_strategy" json:"named_consumer_strategy,omitempty"`
	XXX_unrecognized           []byte  `json:"-"`
}

func (m *UpdatePersistentSubscription) Reset()                    { *m = UpdatePersistentSubscription{} }
func (m *UpdatePersistentSubscription) String() string            { return proto.CompactTextString(m) }
func (*UpdatePersistentSubscription) ProtoMessage()               {}
func (*UpdatePersistentSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *UpdatePersistentSubscription) GetSubscriptionGroupName() string {
	if m != nil && m.SubscriptionGroupName != nil {
		return *m.SubscriptionGroupName
	}
	return ""
}

func (m *UpdatePersistentSubscription) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *UpdatePersistentSubscription) GetResolveLinkTos() bool {
	if m != nil && m.ResolveLinkTos != nil {
		return *m.ResolveLinkTos
	}
	return false
}

func (m *UpdatePersistentSubscription) GetStartFrom() int32 {
	if m != nil && m.StartFrom != nil {
		return *m.StartFrom
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetMessageTimeoutMilliseconds() int32 {
	if m != nil && m.MessageTimeoutMilliseconds != nil {
		return *m.MessageTimeoutMilliseconds
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetRecordStatistics() bool {
	if m != nil && m.RecordStatistics != nil {
		return *m.RecordStatistics
	}
	return false
}

func (m *UpdatePersistentSubscription) GetLiveBufferSize() int32 {
	if m != nil && m.LiveBufferSize != nil {
		return *m.LiveBufferSize
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetReadBatchSize() int32 {
	if m != nil && m.ReadBatchSize != nil {
		return *m.ReadBatchSize
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetBufferSize() int32 {
	if m != nil && m.BufferSize != nil {
		return *m.BufferSize
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetMaxRetryCount() int32 {
	if m != nil && m.MaxRetryCount != nil {
		return *m.MaxRetryCount
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetPreferRoundRobin() bool {
	if m != nil && m.PreferRoundRobin != nil {
		return *m.PreferRoundRobin
	}
	return false
}

func (m *UpdatePersistentSubscription) GetCheckpointAfterTime() int32 {
	if m != nil && m.CheckpointAfterTime != nil {
		return *m.CheckpointAfterTime
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetCheckpointMaxCount() int32 {
	if m != nil && m.CheckpointMaxCount != nil {
		return *m.CheckpointMaxCount
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetCheckpointMinCount() int32 {
	if m != nil && m.CheckpointMinCount != nil {
		return *m.CheckpointMinCount
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetSubscriberMaxCount() int32 {
	if m != nil && m.SubscriberMaxCount != nil {
		return *m.SubscriberMaxCount
	}
	return 0
}

func (m *UpdatePersistentSubscription) GetNamedConsumerStrategy() string {
	if m != nil && m.NamedConsumerStrategy != nil {
		return *m.NamedConsumerStrategy
	}
	return ""
}

type UpdatePersistentSubscriptionCompleted struct {
	Result           *UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult `protobuf:"varint,1,req,name=result,enum=messages.UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult,def=0" json:"result,omitempty"`
	Reason           *string                                                                   `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte                                                                    `json:"-"`
}

func (m *UpdatePersistentSubscriptionCompleted) Reset()         { *m = UpdatePersistentSubscriptionCompleted{} }
func (m *UpdatePersistentSubscriptionCompleted) String() string { return proto.CompactTextString(m) }
func (*UpdatePersistentSubscriptionCompleted) ProtoMessage()    {}
func (*UpdatePersistentSubscriptionCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

const Default_UpdatePersistentSubscriptionCompleted_Result UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult = UpdatePersistentSubscriptionCompleted_Success

func (m *UpdatePersistentSubscriptionCompleted) GetResult() UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_UpdatePersistentSubscriptionCompleted_Result
}

func (m *UpdatePersistentSubscriptionCompleted) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type CreatePersistentSubscriptionCompleted struct {
	Result           *CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult `protobuf:"varint,1,req,name=result,enum=messages.CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult,def=0" json:"result,omitempty"`
	Reason           *string                                                                   `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte                                                                    `json:"-"`
}

func (m *CreatePersistentSubscriptionCompleted) Reset()         { *m = CreatePersistentSubscriptionCompleted{} }
func (m *CreatePersistentSubscriptionCompleted) String() string { return proto.CompactTextString(m) }
func (*CreatePersistentSubscriptionCompleted) ProtoMessage()    {}
func (*CreatePersistentSubscriptionCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

const Default_CreatePersistentSubscriptionCompleted_Result CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult = CreatePersistentSubscriptionCompleted_Success

func (m *CreatePersistentSubscriptionCompleted) GetResult() CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CreatePersistentSubscriptionCompleted_Result
}

func (m *CreatePersistentSubscriptionCompleted) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type DeletePersistentSubscriptionCompleted struct {
	Result           *DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult `protobuf:"varint,1,req,name=result,enum=messages.DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult,def=0" json:"result,omitempty"`
	Reason           *string                                                                   `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte                                                                    `json:"-"`
}

func (m *DeletePersistentSubscriptionCompleted) Reset()         { *m = DeletePersistentSubscriptionCompleted{} }
func (m *DeletePersistentSubscriptionCompleted) String() string { return proto.CompactTextString(m) }
func (*DeletePersistentSubscriptionCompleted) ProtoMessage()    {}
func (*DeletePersistentSubscriptionCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

const Default_DeletePersistentSubscriptionCompleted_Result DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult = DeletePersistentSubscriptionCompleted_Success

func (m *DeletePersistentSubscriptionCompleted) GetResult() DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_DeletePersistentSubscriptionCompleted_Result
}

func (m *DeletePersistentSubscriptionCompleted) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type ConnectToPersistentSubscription struct {
	SubscriptionId          *string `protobuf:"bytes,1,req,name=subscription_id" json:"subscription_id,omitempty"`
	EventStreamId           *string `protobuf:"bytes,2,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	AllowedInFlightMessages *int32  `protobuf:"varint,3,req,name=allowed_in_flight_messages" json:"allowed_in_flight_messages,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *ConnectToPersistentSubscription) Reset()         { *m = ConnectToPersistentSubscription{} }
func (m *ConnectToPersistentSubscription) String() string { return proto.CompactTextString(m) }
func (*ConnectToPersistentSubscription) ProtoMessage()    {}
func (*ConnectToPersistentSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *ConnectToPersistentSubscription) GetSubscriptionId() string {
	if m != nil && m.SubscriptionId != nil {
		return *m.SubscriptionId
	}
	return ""
}

func (m *ConnectToPersistentSubscription) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *ConnectToPersistentSubscription) GetAllowedInFlightMessages() int32 {
	if m != nil && m.AllowedInFlightMessages != nil {
		return *m.AllowedInFlightMessages
	}
	return 0
}

type PersistentSubscriptionAckEvents struct {
	SubscriptionId    *string  `protobuf:"bytes,1,req,name=subscription_id" json:"subscription_id,omitempty"`
	ProcessedEventIds [][]byte `protobuf:"bytes,2,rep,name=processed_event_ids" json:"processed_event_ids,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *PersistentSubscriptionAckEvents) Reset()         { *m = PersistentSubscriptionAckEvents{} }
func (m *PersistentSubscriptionAckEvents) String() string { return proto.CompactTextString(m) }
func (*PersistentSubscriptionAckEvents) ProtoMessage()    {}
func (*PersistentSubscriptionAckEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *PersistentSubscriptionAckEvents) GetSubscriptionId() string {
	if m != nil && m.SubscriptionId != nil {
		return *m.SubscriptionId
	}
	return ""
}

func (m *PersistentSubscriptionAckEvents) GetProcessedEventIds() [][]byte {
	if m != nil {
		return m.ProcessedEventIds
	}
	return nil
}

type PersistentSubscriptionNakEvents struct {
	SubscriptionId    *string                                    `protobuf:"bytes,1,req,name=subscription_id" json:"subscription_id,omitempty"`
	ProcessedEventIds [][]byte                                   `protobuf:"bytes,2,rep,name=processed_event_ids" json:"processed_event_ids,omitempty"`
	Message           *string                                    `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Action            *PersistentSubscriptionNakEvents_NakAction `protobuf:"varint,4,req,name=action,enum=messages.PersistentSubscriptionNakEvents_NakAction,def=0" json:"action,omitempty"`
	XXX_unrecognized  []byte                                     `json:"-"`
}

func (m *PersistentSubscriptionNakEvents) Reset()         { *m = PersistentSubscriptionNakEvents{} }
func (m *PersistentSubscriptionNakEvents) String() string { return proto.CompactTextString(m) }
func (*PersistentSubscriptionNakEvents) ProtoMessage()    {}
func (*PersistentSubscriptionNakEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

const Default_PersistentSubscriptionNakEvents_Action PersistentSubscriptionNakEvents_NakAction = PersistentSubscriptionNakEvents_Unknown

func (m *PersistentSubscriptionNakEvents) GetSubscriptionId() string {
	if m != nil && m.SubscriptionId != nil {
		return *m.SubscriptionId
	}
	return ""
}

func (m *PersistentSubscriptionNakEvents) GetProcessedEventIds() [][]byte {
	if m != nil {
		return m.ProcessedEventIds
	}
	return nil
}

func (m *PersistentSubscriptionNakEvents) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *PersistentSubscriptionNakEvents) GetAction() PersistentSubscriptionNakEvents_NakAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return Default_PersistentSubscriptionNakEvents_Action
}

type PersistentSubscriptionConfirmation struct {
	LastCommitPosition *int64  `protobuf:"varint,1,req,name=last_commit_position" json:"last_commit_position,omitempty"`
	SubscriptionId     *string `protobuf:"bytes,2,req,name=subscription_id" json:"subscription_id,omitempty"`
	LastEventNumber    *int32  `protobuf:"varint,3,opt,name=last_event_number" json:"last_event_number,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *PersistentSubscriptionConfirmation) Reset()         { *m = PersistentSubscriptionConfirmation{} }
func (m *PersistentSubscriptionConfirmation) String() string { return proto.CompactTextString(m) }
func (*PersistentSubscriptionConfirmation) ProtoMessage()    {}
func (*PersistentSubscriptionConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *PersistentSubscriptionConfirmation) GetLastCommitPosition() int64 {
	if m != nil && m.LastCommitPosition != nil {
		return *m.LastCommitPosition
	}
	return 0
}

func (m *PersistentSubscriptionConfirmation) GetSubscriptionId() string {
	if m != nil && m.SubscriptionId != nil {
		return *m.SubscriptionId
	}
	return ""
}

func (m *PersistentSubscriptionConfirmation) GetLastEventNumber() int32 {
	if m != nil && m.LastEventNumber != nil {
		return *m.LastEventNumber
	}
	return 0
}

type PersistentSubscriptionStreamEventAppeared struct {
	Event            *ResolvedIndexedEvent `protobuf:"bytes,1,req,name=event" json:"event,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *PersistentSubscriptionStreamEventAppeared) Reset() {
	*m = PersistentSubscriptionStreamEventAppeared{}
}
func (m *PersistentSubscriptionStreamEventAppeared) String() string { return proto.CompactTextString(m) }
func (*PersistentSubscriptionStreamEventAppeared) ProtoMessage()    {}
func (*PersistentSubscriptionStreamEventAppeared) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *PersistentSubscriptionStreamEventAppeared) GetEvent() *ResolvedIndexedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type SubscribeToStream struct {
	EventStreamId    *string `protobuf:"bytes,1,req,name=event_stream_id" json:"event_stream_id,omitempty"`
	ResolveLinkTos   *bool   `protobuf:"varint,2,req,name=resolve_link_tos" json:"resolve_link_tos,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubscribeToStream) Reset()                    { *m = SubscribeToStream{} }
func (m *SubscribeToStream) String() string            { return proto.CompactTextString(m) }
func (*SubscribeToStream) ProtoMessage()               {}
func (*SubscribeToStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SubscribeToStream) GetEventStreamId() string {
	if m != nil && m.EventStreamId != nil {
		return *m.EventStreamId
	}
	return ""
}

func (m *SubscribeToStream) GetResolveLinkTos() bool {
	if m != nil && m.ResolveLinkTos != nil {
		return *m.ResolveLinkTos
	}
	return false
}

type SubscriptionConfirmation struct {
	LastCommitPosition *int64 `protobuf:"varint,1,req,name=last_commit_position" json:"last_commit_position,omitempty"`
	LastEventNumber    *int32 `protobuf:"varint,2,opt,name=last_event_number" json:"last_event_number,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *SubscriptionConfirmation) Reset()                    { *m = SubscriptionConfirmation{} }
func (m *SubscriptionConfirmation) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionConfirmation) ProtoMessage()               {}
func (*SubscriptionConfirmation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SubscriptionConfirmation) GetLastCommitPosition() int64 {
	if m != nil && m.LastCommitPosition != nil {
		return *m.LastCommitPosition
	}
	return 0
}

func (m *SubscriptionConfirmation) GetLastEventNumber() int32 {
	if m != nil && m.LastEventNumber != nil {
		return *m.LastEventNumber
	}
	return 0
}

type StreamEventAppeared struct {
	Event            *ResolvedEvent `protobuf:"bytes,1,req,name=event" json:"event,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *StreamEventAppeared) Reset()                    { *m = StreamEventAppeared{} }
func (m *StreamEventAppeared) String() string            { return proto.CompactTextString(m) }
func (*StreamEventAppeared) ProtoMessage()               {}
func (*StreamEventAppeared) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *StreamEventAppeared) GetEvent() *ResolvedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type UnsubscribeFromStream struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *UnsubscribeFromStream) Reset()                    { *m = UnsubscribeFromStream{} }
func (m *UnsubscribeFromStream) String() string            { return proto.CompactTextString(m) }
func (*UnsubscribeFromStream) ProtoMessage()               {}
func (*UnsubscribeFromStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type SubscriptionDropped struct {
	Reason           *SubscriptionDropped_SubscriptionDropReason `protobuf:"varint,1,opt,name=reason,enum=messages.SubscriptionDropped_SubscriptionDropReason,def=0" json:"reason,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *SubscriptionDropped) Reset()                    { *m = SubscriptionDropped{} }
func (m *SubscriptionDropped) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionDropped) ProtoMessage()               {}
func (*SubscriptionDropped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

const Default_SubscriptionDropped_Reason SubscriptionDropped_SubscriptionDropReason = SubscriptionDropped_Unsubscribed

func (m *SubscriptionDropped) GetReason() SubscriptionDropped_SubscriptionDropReason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return Default_SubscriptionDropped_Reason
}

type NotHandled struct {
	Reason           *NotHandled_NotHandledReason `protobuf:"varint,1,req,name=reason,enum=messages.NotHandled_NotHandledReason" json:"reason,omitempty"`
	AdditionalInfo   []byte                       `protobuf:"bytes,2,opt,name=additional_info" json:"additional_info,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *NotHandled) Reset()                    { *m = NotHandled{} }
func (m *NotHandled) String() string            { return proto.CompactTextString(m) }
func (*NotHandled) ProtoMessage()               {}
func (*NotHandled) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *NotHandled) GetReason() NotHandled_NotHandledReason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return NotHandled_NotReady
}

func (m *NotHandled) GetAdditionalInfo() []byte {
	if m != nil {
		return m.AdditionalInfo
	}
	return nil
}

type NotHandled_MasterInfo struct {
	ExternalTcpAddress       *string `protobuf:"bytes,1,req,name=external_tcp_address" json:"external_tcp_address,omitempty"`
	ExternalTcpPort          *int32  `protobuf:"varint,2,req,name=external_tcp_port" json:"external_tcp_port,omitempty"`
	ExternalHttpAddress      *string `protobuf:"bytes,3,req,name=external_http_address" json:"external_http_address,omitempty"`
	ExternalHttpPort         *int32  `protobuf:"varint,4,req,name=external_http_port" json:"external_http_port,omitempty"`
	ExternalSecureTcpAddress *string `protobuf:"bytes,5,opt,name=external_secure_tcp_address" json:"external_secure_tcp_address,omitempty"`
	ExternalSecureTcpPort    *int32  `protobuf:"varint,6,opt,name=external_secure_tcp_port" json:"external_secure_tcp_port,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *NotHandled_MasterInfo) Reset()                    { *m = NotHandled_MasterInfo{} }
func (m *NotHandled_MasterInfo) String() string            { return proto.CompactTextString(m) }
func (*NotHandled_MasterInfo) ProtoMessage()               {}
func (*NotHandled_MasterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36, 0} }

func (m *NotHandled_MasterInfo) GetExternalTcpAddress() string {
	if m != nil && m.ExternalTcpAddress != nil {
		return *m.ExternalTcpAddress
	}
	return ""
}

func (m *NotHandled_MasterInfo) GetExternalTcpPort() int32 {
	if m != nil && m.ExternalTcpPort != nil {
		return *m.ExternalTcpPort
	}
	return 0
}

func (m *NotHandled_MasterInfo) GetExternalHttpAddress() string {
	if m != nil && m.ExternalHttpAddress != nil {
		return *m.ExternalHttpAddress
	}
	return ""
}

func (m *NotHandled_MasterInfo) GetExternalHttpPort() int32 {
	if m != nil && m.ExternalHttpPort != nil {
		return *m.ExternalHttpPort
	}
	return 0
}

func (m *NotHandled_MasterInfo) GetExternalSecureTcpAddress() string {
	if m != nil && m.ExternalSecureTcpAddress != nil {
		return *m.ExternalSecureTcpAddress
	}
	return ""
}

func (m *NotHandled_MasterInfo) GetExternalSecureTcpPort() int32 {
	if m != nil && m.ExternalSecureTcpPort != nil {
		return *m.ExternalSecureTcpPort
	}
	return 0
}

type ScavengeDatabase struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ScavengeDatabase) Reset()                    { *m = ScavengeDatabase{} }
func (m *ScavengeDatabase) String() string            { return proto.CompactTextString(m) }
func (*ScavengeDatabase) ProtoMessage()               {}
func (*ScavengeDatabase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type ScavengeDatabaseCompleted struct {
	Result           *ScavengeDatabaseCompleted_ScavengeResult `protobuf:"varint,1,req,name=result,enum=messages.ScavengeDatabaseCompleted_ScavengeResult" json:"result,omitempty"`
	Error            *string                                   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	TotalTimeMs      *int32                                    `protobuf:"varint,3,req,name=total_time_ms" json:"total_time_ms,omitempty"`
	TotalSpaceSaved  *int64                                    `protobuf:"varint,4,req,name=total_space_saved" json:"total_space_saved,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *ScavengeDatabaseCompleted) Reset()                    { *m = ScavengeDatabaseCompleted{} }
func (m *ScavengeDatabaseCompleted) String() string            { return proto.CompactTextString(m) }
func (*ScavengeDatabaseCompleted) ProtoMessage()               {}
func (*ScavengeDatabaseCompleted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ScavengeDatabaseCompleted) GetResult() ScavengeDatabaseCompleted_ScavengeResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ScavengeDatabaseCompleted_Success
}

func (m *ScavengeDatabaseCompleted) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *ScavengeDatabaseCompleted) GetTotalTimeMs() int32 {
	if m != nil && m.TotalTimeMs != nil {
		return *m.TotalTimeMs
	}
	return 0
}

func (m *ScavengeDatabaseCompleted) GetTotalSpaceSaved() int64 {
	if m != nil && m.TotalSpaceSaved != nil {
		return *m.TotalSpaceSaved
	}
	return 0
}

func init() {
	proto.RegisterType((*NewEvent)(nil), "messages.NewEvent")
	proto.RegisterType((*EventRecord)(nil), "messages.EventRecord")
	proto.RegisterType((*ResolvedIndexedEvent)(nil), "messages.ResolvedIndexedEvent")
	proto.RegisterType((*ResolvedEvent)(nil), "messages.ResolvedEvent")
	proto.RegisterType((*WriteEvents)(nil), "messages.WriteEvents")
	proto.RegisterType((*WriteEventsCompleted)(nil), "messages.WriteEventsCompleted")
	proto.RegisterType((*DeleteStream)(nil), "messages.DeleteStream")
	proto.RegisterType((*DeleteStreamCompleted)(nil), "messages.DeleteStreamCompleted")
	proto.RegisterType((*TransactionStart)(nil), "messages.TransactionStart")
	proto.RegisterType((*TransactionStartCompleted)(nil), "messages.TransactionStartCompleted")
	proto.RegisterType((*TransactionWrite)(nil), "messages.TransactionWrite")
	proto.RegisterType((*TransactionWriteCompleted)(nil), "messages.TransactionWriteCompleted")
	proto.RegisterType((*TransactionCommit)(nil), "messages.TransactionCommit")
	proto.RegisterType((*TransactionCommitCompleted)(nil), "messages.TransactionCommitCompleted")
	proto.RegisterType((*ReadEvent)(nil), "messages.ReadEvent")
	proto.RegisterType((*ReadEventCompleted)(nil), "messages.ReadEventCompleted")
	proto.RegisterType((*ReadStreamEvents)(nil), "messages.ReadStreamEvents")
	proto.RegisterType((*ReadStreamEventsCompleted)(nil), "messages.ReadStreamEventsCompleted")
	proto.RegisterType((*ReadAllEvents)(nil), "messages.ReadAllEvents")
	proto.RegisterType((*ReadAllEventsCompleted)(nil), "messages.ReadAllEventsCompleted")
	proto.RegisterType((*CreatePersistentSubscription)(nil), "messages.CreatePersistentSubscription")
	proto.RegisterType((*DeletePersistentSubscription)(nil), "messages.DeletePersistentSubscription")
	proto.RegisterType((*UpdatePersistentSubscription)(nil), "messages.UpdatePersistentSubscription")
	proto.RegisterType((*UpdatePersistentSubscriptionCompleted)(nil), "messages.UpdatePersistentSubscriptionCompleted")
	proto.RegisterType((*CreatePersistentSubscriptionCompleted)(nil), "messages.CreatePersistentSubscriptionCompleted")
	proto.RegisterType((*DeletePersistentSubscriptionCompleted)(nil), "messages.DeletePersistentSubscriptionCompleted")
	proto.RegisterType((*ConnectToPersistentSubscription)(nil), "messages.ConnectToPersistentSubscription")
	proto.RegisterType((*PersistentSubscriptionAckEvents)(nil), "messages.PersistentSubscriptionAckEvents")
	proto.RegisterType((*PersistentSubscriptionNakEvents)(nil), "messages.PersistentSubscriptionNakEvents")
	proto.RegisterType((*PersistentSubscriptionConfirmation)(nil), "messages.PersistentSubscriptionConfirmation")
	proto.RegisterType((*PersistentSubscriptionStreamEventAppeared)(nil), "messages.PersistentSubscriptionStreamEventAppeared")
	proto.RegisterType((*SubscribeToStream)(nil), "messages.SubscribeToStream")
	proto.RegisterType((*SubscriptionConfirmation)(nil), "messages.SubscriptionConfirmation")
	proto.RegisterType((*StreamEventAppeared)(nil), "messages.StreamEventAppeared")
	proto.RegisterType((*UnsubscribeFromStream)(nil), "messages.UnsubscribeFromStream")
	proto.RegisterType((*SubscriptionDropped)(nil), "messages.SubscriptionDropped")
	proto.RegisterType((*NotHandled)(nil), "messages.NotHandled")
	proto.RegisterType((*NotHandled_MasterInfo)(nil), "messages.NotHandled.MasterInfo")
	proto.RegisterType((*ScavengeDatabase)(nil), "messages.ScavengeDatabase")
	proto.RegisterType((*ScavengeDatabaseCompleted)(nil), "messages.ScavengeDatabaseCompleted")
	proto.RegisterEnum("messages.OperationResult", OperationResult_name, OperationResult_value)
	proto.RegisterEnum("messages.ReadEventCompleted_ReadEventResult", ReadEventCompleted_ReadEventResult_name, ReadEventCompleted_ReadEventResult_value)
	proto.RegisterEnum("messages.ReadStreamEventsCompleted_ReadStreamResult", ReadStreamEventsCompleted_ReadStreamResult_name, ReadStreamEventsCompleted_ReadStreamResult_value)
	proto.RegisterEnum("messages.ReadAllEventsCompleted_ReadAllResult", ReadAllEventsCompleted_ReadAllResult_name, ReadAllEventsCompleted_ReadAllResult_value)
	proto.RegisterEnum("messages.UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult", UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_name, UpdatePersistentSubscriptionCompleted_UpdatePersistentSubscriptionResult_value)
	proto.RegisterEnum("messages.CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult", CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_name, CreatePersistentSubscriptionCompleted_CreatePersistentSubscriptionResult_value)
	proto.RegisterEnum("messages.DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult", DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_name, DeletePersistentSubscriptionCompleted_DeletePersistentSubscriptionResult_value)
	proto.RegisterEnum("messages.PersistentSubscriptionNakEvents_NakAction", PersistentSubscriptionNakEvents_NakAction_name, PersistentSubscriptionNakEvents_NakAction_value)
	proto.RegisterEnum("messages.SubscriptionDropped_SubscriptionDropReason", SubscriptionDropped_SubscriptionDropReason_name, SubscriptionDropped_SubscriptionDropReason_value)
	proto.RegisterEnum("messages.NotHandled_NotHandledReason", NotHandled_NotHandledReason_name, NotHandled_NotHandledReason_value)
	proto.RegisterEnum("messages.ScavengeDatabaseCompleted_ScavengeResult", ScavengeDatabaseCompleted_ScavengeResult_name, ScavengeDatabaseCompleted_ScavengeResult_value)
}

func init() {
	proto.RegisterFile("github.com/jdextraze/go-gesclient/messages/ClientMessageDtos.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 2038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x5b, 0x6f, 0xe4, 0x48,
	0xf5, 0x1f, 0xbb, 0x2f, 0xe9, 0x3e, 0xe9, 0x74, 0xdc, 0xce, 0xad, 0x3b, 0x9b, 0xfc, 0x27, 0x7f,
	0xef, 0x0e, 0x64, 0x11, 0x9b, 0x91, 0x02, 0x3c, 0x30, 0x5a, 0x1e, 0x32, 0xc9, 0x04, 0x06, 0x31,
	0x61, 0x94, 0x64, 0x18, 0x84, 0x84, 0x4c, 0xc5, 0x3e, 0xdd, 0xf1, 0xc6, 0xed, 0x32, 0x55, 0xd5,
	0xb9, 0xac, 0x78, 0x65, 0x91, 0xb8, 0x7c, 0x17, 0x3e, 0x00, 0xef, 0x7c, 0x02, 0x5e, 0x40, 0xe2,
	0x69, 0x3f, 0x04, 0x48, 0x08, 0xa1, 0xaa, 0x72, 0xb7, 0xdd, 0x6d, 0x3b, 0xc9, 0x5c, 0xf6, 0x05,
	0xf1, 0xd6, 0xae, 0x53, 0x75, 0xae, 0xbf, 0x3a, 0x97, 0x6a, 0x78, 0x3a, 0x08, 0xc4, 0xf9, 0xe8,
	0x6c, 0xc7, 0xa3, 0xc3, 0xc7, 0x9f, 0xf9, 0x78, 0x2d, 0x18, 0xf9, 0x1c, 0x1f, 0x0f, 0xe8, 0x27,
	0x03, 0xe4, 0x5e, 0x18, 0x60, 0x24, 0x1e, 0x0f, 0x91, 0x73, 0x32, 0x40, 0xfe, 0x78, 0x5f, 0x7d,
	0xbf, 0xd0, 0x9f, 0x07, 0x82, 0xf2, 0x9d, 0x98, 0x51, 0x41, 0xed, 0xc6, 0x78, 0x87, 0xf3, 0x5b,
	0x03, 0x1a, 0x47, 0x78, 0xf5, 0xec, 0x12, 0x23, 0x61, 0x5b, 0xd0, 0x40, 0xf9, 0xc3, 0x0d, 0xfc,
	0xae, 0xb1, 0x65, 0x6e, 0xb7, 0x6c, 0x1b, 0x40, 0xaf, 0x88, 0x9b, 0x18, 0xbb, 0xe6, 0x96, 0xb9,
	0xdd, 0xb4, 0x7b, 0xd0, 0xf1, 0x89, 0x20, 0xae, 0x47, 0x23, 0x31, 0x21, 0x55, 0xb6, 0xcc, 0xed,
	0x9a, 0xbd, 0x09, 0x2b, 0x43, 0x14, 0x24, 0x4f, 0xae, 0x2a, 0x72, 0x0b, 0xaa, 0x92, 0xd4, 0xad,
	0x29, 0xde, 0x16, 0x34, 0xc6, 0x9b, 0xbb, 0xf5, 0x2d, 0x63, 0xbb, 0xe5, 0x7c, 0x69, 0xc0, 0xbc,
	0xd2, 0xe4, 0x18, 0x3d, 0xca, 0x7c, 0x7b, 0x0d, 0x16, 0xb5, 0x74, 0x2e, 0x18, 0x92, 0xe1, 0x58,
	0xad, 0xa6, 0xbd, 0x0c, 0x2d, 0x4d, 0x88, 0x46, 0xc3, 0x33, 0x64, 0x4a, 0xb1, 0xda, 0x94, 0xfa,
	0x95, 0x02, 0xf5, 0xab, 0xe5, 0xea, 0xd7, 0x6e, 0x57, 0xbf, 0x3e, 0xa5, 0xfe, 0x5c, 0x4e, 0xfd,
	0x86, 0x54, 0xdf, 0x5e, 0x84, 0x39, 0x8f, 0x21, 0x11, 0xe8, 0x77, 0x9b, 0x5b, 0xc6, 0x76, 0xc5,
	0x5e, 0x81, 0x85, 0x64, 0xc1, 0xc5, 0x98, 0x7a, 0xe7, 0x5d, 0x90, 0xcb, 0x0e, 0x81, 0xe5, 0x63,
	0xe4, 0x34, 0xbc, 0x44, 0xff, 0x79, 0xe4, 0xe3, 0x35, 0xfa, 0xda, 0xfd, 0x1f, 0x41, 0x4d, 0x69,
	0xdb, 0x35, 0xb6, 0x8c, 0xed, 0xf9, 0xdd, 0x95, 0x9d, 0x71, 0x94, 0x76, 0xb2, 0x4e, 0xf9, 0x10,
	0xaa, 0x61, 0x10, 0x5d, 0x74, 0xcd, 0x5b, 0x36, 0x39, 0x7f, 0x30, 0x60, 0x61, 0x2c, 0x23, 0xc7,
	0xdc, 0x7c, 0x37, 0xe6, 0x32, 0x2c, 0x1e, 0x1d, 0x0e, 0x03, 0xe1, 0xc6, 0x94, 0x07, 0x22, 0xa0,
	0x91, 0x72, 0x77, 0xc5, 0xee, 0x82, 0x15, 0x33, 0x8c, 0x09, 0xc3, 0x94, 0x22, 0x9d, 0x5e, 0x71,
	0x7e, 0x05, 0xf3, 0xaf, 0x59, 0x20, 0x50, 0xb1, 0xe1, 0xe5, 0x81, 0xed, 0x82, 0x85, 0xd7, 0x31,
	0x7a, 0xd2, 0x65, 0x97, 0xc8, 0xb8, 0xe4, 0xa0, 0x83, 0xeb, 0x40, 0x5d, 0x1d, 0xe1, 0xdd, 0xca,
	0x56, 0x65, 0x7b, 0x7e, 0xd7, 0x4e, 0x75, 0x9b, 0xe0, 0x77, 0x15, 0xda, 0x0c, 0x7f, 0x39, 0x0a,
	0x18, 0xba, 0x43, 0xc2, 0x05, 0x32, 0x25, 0xbd, 0xe1, 0xfc, 0xc9, 0x80, 0xe5, 0x8c, 0xf8, 0x7d,
	0x3a, 0x8c, 0x43, 0x14, 0xe8, 0xdb, 0x1f, 0x43, 0x9d, 0x21, 0x1f, 0x85, 0xda, 0x2b, 0xed, 0xdd,
	0x5e, 0xca, 0xf4, 0xc7, 0x31, 0x32, 0x22, 0x2d, 0x38, 0x56, 0x1b, 0x64, 0x70, 0x13, 0x9a, 0x72,
	0x4e, 0xd3, 0x5e, 0x07, 0xbb, 0x1f, 0x30, 0x2e, 0xdc, 0x29, 0x24, 0xea, 0x7b, 0xd0, 0x83, 0x4e,
	0x48, 0x66, 0x49, 0xfa, 0x0e, 0x14, 0xf9, 0xa8, 0xa6, 0xd0, 0x52, 0xe0, 0xd6, 0xba, 0xc2, 0x4b,
	0x04, 0xad, 0x03, 0x94, 0x0a, 0x9f, 0x28, 0x6f, 0xbd, 0x8d, 0xf7, 0xf2, 0x9e, 0x91, 0x8a, 0x36,
	0xec, 0x25, 0x98, 0x3f, 0x27, 0xcc, 0x77, 0x7d, 0xc5, 0xbf, 0x5b, 0xdd, 0x32, 0xb6, 0x1b, 0xce,
	0x17, 0x06, 0xac, 0x64, 0x05, 0xbe, 0x1f, 0x7f, 0x15, 0x19, 0x5e, 0x29, 0x33, 0xbc, 0xaa, 0x0c,
	0xff, 0x39, 0x58, 0xa7, 0x8c, 0x44, 0x9c, 0x78, 0x72, 0xf1, 0x44, 0x10, 0x26, 0xde, 0xa3, 0xf1,
	0x0e, 0x85, 0xde, 0x2c, 0xfb, 0xd4, 0xd4, 0x55, 0x68, 0x8b, 0x94, 0x38, 0x16, 0x53, 0xc9, 0xb8,
	0xc0, 0x7c, 0x03, 0x17, 0x48, 0x43, 0x9b, 0x4e, 0x7f, 0xca, 0x1e, 0x85, 0xc8, 0x52, 0x39, 0x29,
	0xde, 0xcd, 0x37, 0xc0, 0x7b, 0x91, 0x61, 0x4a, 0xce, 0x57, 0x6b, 0xd8, 0x3e, 0x74, 0x32, 0x02,
	0xf7, 0x55, 0x30, 0x4b, 0x05, 0xe5, 0xb5, 0x36, 0x95, 0xd6, 0x7f, 0x35, 0x60, 0x3d, 0xc7, 0xe5,
	0x2b, 0xd5, 0xbb, 0xe4, 0x0e, 0x57, 0xcb, 0xef, 0x70, 0xad, 0xf4, 0x0e, 0xd7, 0xcb, 0xa0, 0x3c,
	0xa7, 0xa0, 0x1c, 0x42, 0xf3, 0x18, 0x49, 0x92, 0x8b, 0xdf, 0xb0, 0xae, 0x75, 0xc1, 0x62, 0x3a,
	0x97, 0xbb, 0x32, 0x39, 0xbb, 0x82, 0xf2, 0xe4, 0xfa, 0x96, 0x25, 0xbc, 0x7f, 0x19, 0x60, 0x4f,
	0xc4, 0xa5, 0x2e, 0xfc, 0x74, 0xe6, 0xfa, 0x7e, 0x33, 0x75, 0x55, 0x7e, 0x77, 0xba, 0x94, 0x78,
	0xef, 0x93, 0x71, 0x05, 0x31, 0x55, 0x05, 0xf9, 0xbf, 0xec, 0xe1, 0x82, 0x6a, 0xb6, 0x00, 0x35,
	0x64, 0x8c, 0xb2, 0x04, 0x22, 0x9f, 0xc1, 0xe2, 0x2c, 0xc3, 0x79, 0x98, 0x3b, 0x19, 0x79, 0x1e,
	0x72, 0x6e, 0x3d, 0xb0, 0x5b, 0xd0, 0x38, 0xa2, 0xe2, 0x90, 0x8e, 0x22, 0xdf, 0x32, 0xf4, 0x97,
	0xce, 0x3e, 0x96, 0x69, 0x77, 0x60, 0x41, 0xff, 0xd6, 0x59, 0xc9, 0xb7, 0x2a, 0x76, 0x13, 0x6a,
	0xcf, 0x24, 0x77, 0xab, 0x6a, 0x5b, 0xd0, 0xda, 0x53, 0x5c, 0x0e, 0x30, 0x0a, 0xd0, 0xb7, 0x6a,
	0xce, 0xef, 0x0c, 0xb0, 0xa4, 0x30, 0x7d, 0xe8, 0xae, 0x9a, 0xd3, 0x83, 0x4e, 0x9f, 0xd1, 0xa1,
	0x5b, 0xe0, 0xf9, 0x0e, 0x34, 0x87, 0xe4, 0xda, 0xf5, 0xe8, 0x28, 0x12, 0x49, 0x6a, 0x2f, 0x0a,
	0x46, 0xb5, 0x24, 0x18, 0x35, 0x15, 0x8c, 0x7f, 0x9b, 0xd0, 0x9b, 0xd5, 0x26, 0x8d, 0xc9, 0xce,
	0xe4, 0x9e, 0x1b, 0xea, 0x9e, 0xdf, 0xe5, 0xd6, 0x83, 0x19, 0xb8, 0x7f, 0x7b, 0x3a, 0x86, 0x85,
	0x42, 0x32, 0x94, 0xc4, 0xf5, 0x3d, 0xe8, 0x44, 0x78, 0xfd, 0x16, 0xb5, 0x2b, 0xe0, 0x2e, 0x46,
	0xbe, 0x4b, 0xfb, 0x89, 0x1b, 0xb5, 0x8d, 0xf6, 0x06, 0x2c, 0xab, 0x43, 0xf9, 0x02, 0x26, 0xaf,
	0xe8, 0x04, 0x0a, 0x73, 0x0a, 0x0a, 0x51, 0x36, 0x3a, 0xa5, 0x58, 0x48, 0xa2, 0x6f, 0xe4, 0xa3,
	0x6f, 0xda, 0x8b, 0x30, 0x7f, 0x44, 0xc5, 0x0b, 0xea, 0x07, 0xfd, 0xe0, 0x6e, 0x38, 0xfc, 0x46,
	0x35, 0x43, 0xc4, 0xdf, 0x0b, 0xc3, 0x14, 0x0b, 0xb3, 0x9a, 0x1a, 0xa5, 0x1d, 0x8c, 0xa9, 0x28,
	0xef, 0x05, 0x0a, 0x7f, 0x31, 0x61, 0x75, 0x4a, 0x93, 0x14, 0x07, 0x6f, 0xa1, 0xd2, 0xd7, 0x67,
	0x5a, 0xa2, 0xb5, 0x3c, 0x74, 0x34, 0x66, 0x36, 0x60, 0x59, 0x45, 0x3b, 0x5f, 0x65, 0x25, 0x9b,
	0x4d, 0x58, 0x51, 0xd4, 0x82, 0xb6, 0x44, 0x92, 0xbf, 0x3f, 0x01, 0x9c, 0x4c, 0x71, 0xed, 0xdd,
	0x9d, 0x69, 0xc0, 0xe5, 0x4d, 0x19, 0x2f, 0xeb, 0xc8, 0x3e, 0x19, 0xc7, 0x75, 0x16, 0x05, 0x3f,
	0x9c, 0x04, 0xa5, 0x08, 0x02, 0x33, 0x11, 0x36, 0xd2, 0x08, 0x9b, 0xb9, 0x08, 0x57, 0x9c, 0xbf,
	0x57, 0x60, 0x63, 0x5f, 0x75, 0xda, 0x2f, 0x65, 0xe5, 0xe7, 0xb2, 0x73, 0x3f, 0x19, 0x9d, 0x71,
	0x8f, 0x05, 0xb1, 0x34, 0xc5, 0x7e, 0x08, 0x6b, 0x3c, 0xf3, 0xed, 0x0e, 0x18, 0x1d, 0xc5, 0x6e,
	0x44, 0x86, 0x98, 0x24, 0x81, 0x82, 0xec, 0x60, 0x8e, 0xdb, 0x8a, 0x92, 0xe4, 0x6b, 0x03, 0x70,
	0xd9, 0x33, 0xb8, 0x32, 0x7b, 0x24, 0x37, 0xe4, 0x23, 0xd8, 0x48, 0xbc, 0xe3, 0x8a, 0x60, 0x88,
	0x74, 0x24, 0xdc, 0x61, 0x10, 0x86, 0x01, 0x47, 0x8f, 0x46, 0x3e, 0x4f, 0xea, 0x47, 0x0f, 0x3a,
	0x4c, 0xb5, 0xd2, 0x2e, 0x17, 0x44, 0x04, 0x5c, 0x04, 0x1e, 0x57, 0x57, 0xa5, 0x21, 0xc5, 0x85,
	0xc1, 0x25, 0xba, 0x67, 0xa3, 0x7e, 0x1f, 0x99, 0xcb, 0x83, 0xcf, 0x51, 0xcd, 0x1b, 0x35, 0xa9,
	0x21, 0x43, 0xe2, 0xbb, 0x67, 0x44, 0x78, 0xe7, 0x9a, 0xd0, 0x50, 0x84, 0x25, 0x98, 0xcf, 0xee,
	0x6e, 0x8e, 0x77, 0x4b, 0xb8, 0x32, 0x14, 0xec, 0x26, 0x01, 0x2d, 0x28, 0xc2, 0x3a, 0xd8, 0x31,
	0x43, 0xb9, 0x9b, 0xc9, 0x5c, 0xeb, 0x32, 0x7a, 0x16, 0x44, 0xdd, 0x79, 0x25, 0x7c, 0x13, 0x56,
	0xbc, 0x73, 0xf4, 0x2e, 0x62, 0x1a, 0x44, 0xc2, 0x25, 0x7d, 0x81, 0x4c, 0x99, 0xd1, 0x6d, 0xa9,
	0xa3, 0x1b, 0xb0, 0x9c, 0x21, 0xa7, 0xb7, 0x61, 0xa1, 0x88, 0x1a, 0x44, 0x09, 0xb5, 0x3d, 0xa6,
	0x26, 0x01, 0x38, 0x43, 0x96, 0x39, 0xbb, 0xa8, 0xa8, 0x0f, 0x61, 0x4d, 0xc6, 0xc2, 0x97, 0x53,
	0x17, 0x1f, 0x0d, 0xa5, 0x29, 0x82, 0x11, 0x81, 0x83, 0x9b, 0xae, 0xa5, 0xc0, 0xf2, 0x53, 0xd8,
	0xd0, 0xb7, 0xff, 0x7d, 0xc7, 0x57, 0x41, 0xe7, 0x55, 0xec, 0xff, 0x0f, 0x3a, 0xff, 0xad, 0xd0,
	0xf9, 0xb5, 0x09, 0x8f, 0x6e, 0x0b, 0x70, 0x9a, 0x82, 0x2f, 0x66, 0xda, 0xa3, 0xe3, 0x34, 0xd3,
	0xdd, 0x8b, 0xc1, 0xad, 0xbb, 0x66, 0xb3, 0x61, 0x5b, 0x0a, 0x23, 0x5c, 0x25, 0x73, 0xa9, 0xa6,
	0x0b, 0xce, 0xdd, 0xc7, 0xa7, 0x73, 0xa4, 0x05, 0xad, 0x03, 0x8a, 0xfc, 0x88, 0x8a, 0x67, 0xd7,
	0x01, 0x17, 0x96, 0x61, 0x37, 0xa0, 0x7a, 0x48, 0x82, 0xb0, 0x30, 0x47, 0x7e, 0x61, 0xc2, 0xa3,
	0xdb, 0x72, 0xe4, 0xbd, 0xfc, 0x70, 0x2f, 0x06, 0xb7, 0xee, 0xba, 0xcb, 0x0f, 0xbf, 0x00, 0xe7,
	0xee, 0xe3, 0xd3, 0x7e, 0xe8, 0xc0, 0xc2, 0x5e, 0x28, 0x01, 0x7e, 0xa3, 0xfc, 0xc0, 0xef, 0x70,
	0x84, 0x04, 0xc4, 0x6d, 0xc9, 0xe4, 0x5e, 0x8e, 0xb8, 0x17, 0x83, 0x5b, 0x77, 0xdd, 0x03, 0x10,
	0x77, 0x1f, 0x7f, 0x17, 0x40, 0x5c, 0xc1, 0xc3, 0x7d, 0x1a, 0x45, 0xe8, 0x89, 0x53, 0x5a, 0x92,
	0xfb, 0xd6, 0x60, 0x71, 0x2a, 0xf7, 0x4d, 0x7a, 0xe6, 0xd2, 0x9c, 0xe7, 0xc0, 0x3a, 0x09, 0x43,
	0x7a, 0x85, 0xbe, 0x1b, 0x44, 0x6e, 0x3f, 0x0c, 0x06, 0xe7, 0xc2, 0x1d, 0x7b, 0x4d, 0xf7, 0x4d,
	0xce, 0x6b, 0x78, 0x58, 0x2c, 0x6f, 0xcf, 0xbb, 0x48, 0x1b, 0xb4, 0x62, 0xc1, 0x1f, 0xc0, 0x52,
	0xcc, 0xa8, 0xb4, 0x03, 0x7d, 0x77, 0xfc, 0xda, 0xa7, 0x67, 0xe4, 0x96, 0xf3, 0x4f, 0xa3, 0x8c,
	0xf3, 0x11, 0x79, 0x27, 0xce, 0xf9, 0xc9, 0xf1, 0x47, 0x50, 0xd7, 0x83, 0xa8, 0xca, 0xde, 0xed,
	0xdd, 0x6f, 0xa5, 0xd0, 0xb8, 0x43, 0x83, 0x9d, 0x23, 0x72, 0xb1, 0xa7, 0x8e, 0x3e, 0x99, 0x7b,
	0x15, 0x5d, 0x44, 0xf4, 0x2a, 0x72, 0xf6, 0xa0, 0x39, 0x59, 0x95, 0x21, 0x4d, 0xd6, 0xad, 0x07,
	0x32, 0x80, 0x2f, 0x09, 0xbb, 0xd0, 0x0d, 0xd0, 0xb1, 0x4c, 0xc9, 0x96, 0x29, 0x17, 0x4f, 0x2e,
	0x82, 0xd8, 0xaa, 0xa8, 0x5f, 0x82, 0xc6, 0x56, 0xd5, 0xb9, 0x04, 0xa7, 0x0c, 0x8d, 0x51, 0x3f,
	0x60, 0x43, 0x35, 0x07, 0x97, 0xf6, 0xe9, 0xba, 0xd5, 0x2c, 0xf0, 0xcd, 0xe4, 0xc9, 0x37, 0x3f,
	0x13, 0x48, 0x47, 0xd4, 0x9c, 0x9f, 0xc1, 0xc7, 0xc5, 0x72, 0x33, 0x93, 0xc8, 0x5e, 0x1c, 0x23,
	0x61, 0xe8, 0xa7, 0x23, 0xa4, 0x71, 0x9f, 0x11, 0xd2, 0x39, 0x84, 0xce, 0xc9, 0x38, 0xf3, 0x9f,
	0xd2, 0x7b, 0xbc, 0x7e, 0xe5, 0xca, 0xad, 0x7e, 0x59, 0x38, 0x81, 0xee, 0x5b, 0x7a, 0xa4, 0xd0,
	0x70, 0x53, 0x19, 0xfe, 0x3d, 0x58, 0x2a, 0x32, 0xf1, 0x6b, 0xd3, 0x26, 0x96, 0xf5, 0xe4, 0xce,
	0x1a, 0xac, 0xbc, 0x8a, 0x26, 0x75, 0xed, 0x90, 0xd1, 0xa1, 0xe6, 0xe6, 0xfc, 0xc3, 0x80, 0xa5,
	0xac, 0xb6, 0x07, 0x8c, 0xc6, 0x31, 0xfa, 0xf6, 0xf1, 0x24, 0x3f, 0x18, 0xaa, 0x0f, 0xcf, 0x0c,
	0x7e, 0x05, 0xdb, 0x73, 0x6b, 0xc7, 0xea, 0xec, 0x93, 0x56, 0x46, 0xa8, 0xef, 0xfc, 0xde, 0x80,
	0xd5, 0xe2, 0x8d, 0x32, 0x5f, 0x64, 0xb7, 0xea, 0xec, 0x32, 0x95, 0x41, 0x8c, 0xa9, 0x99, 0xdd,
	0xb4, 0xff, 0x1f, 0x36, 0x8b, 0x91, 0x90, 0x4e, 0xed, 0x9b, 0xd0, 0x9b, 0x04, 0x94, 0xbd, 0x20,
	0xd7, 0xfb, 0xb2, 0x90, 0x1f, 0x23, 0xf1, 0xce, 0xd1, 0xb7, 0xaa, 0xce, 0x97, 0x26, 0xc0, 0x11,
	0x15, 0x3f, 0x20, 0x91, 0x1f, 0xa2, 0x6f, 0x7f, 0x27, 0x63, 0xb1, 0xbc, 0x63, 0x8f, 0x32, 0x4f,
	0x60, 0x93, 0x5d, 0x99, 0x9f, 0x89, 0xe6, 0x6b, 0xb0, 0x48, 0x7c, 0x5f, 0x45, 0x91, 0x84, 0x6e,
	0x10, 0xf5, 0xa9, 0x8a, 0x58, 0x6b, 0xfd, 0xcf, 0x06, 0xc0, 0x0b, 0x35, 0x8e, 0x3d, 0x8f, 0xfa,
	0x54, 0x46, 0x1e, 0xaf, 0x05, 0x32, 0xb9, 0x4b, 0x78, 0xb1, 0x4b, 0x7c, 0x9f, 0x21, 0xe7, 0xe9,
	0xab, 0xc0, 0x14, 0x35, 0xa6, 0x4c, 0x24, 0xaf, 0x02, 0x9b, 0xb0, 0x32, 0x21, 0x9d, 0x0b, 0x91,
	0x9e, 0xac, 0xa8, 0x93, 0xeb, 0x60, 0x4f, 0x93, 0xd5, 0x51, 0xdd, 0xe4, 0x7d, 0x08, 0x1f, 0x4c,
	0x68, 0x1c, 0xbd, 0x11, 0xc3, 0x29, 0xd1, 0x35, 0x95, 0x5b, 0xb6, 0xa0, 0x5b, 0xb4, 0x49, 0xb1,
	0xa9, 0x2b, 0xec, 0x7d, 0x0a, 0x56, 0xce, 0x6c, 0x1d, 0x0c, 0x39, 0x52, 0xdd, 0x58, 0x0f, 0x64,
	0x12, 0x39, 0xa5, 0xf4, 0xe9, 0x88, 0xdf, 0x58, 0x86, 0xbd, 0x00, 0x4d, 0x39, 0x4c, 0x29, 0xd3,
	0x2d, 0xd3, 0xb1, 0xc1, 0x3a, 0xf1, 0xc8, 0x25, 0x46, 0x03, 0x3c, 0x20, 0x82, 0x9c, 0x11, 0x8e,
	0xce, 0xdf, 0x0c, 0xe8, 0xcd, 0x2e, 0xa6, 0x85, 0xf0, 0xe9, 0x4c, 0x21, 0xdc, 0xcd, 0x60, 0xaf,
	0xec, 0xd0, 0x84, 0x92, 0x54, 0xaa, 0xc9, 0xf8, 0xa7, 0x9f, 0x83, 0x57, 0x60, 0x41, 0x50, 0x21,
	0x9d, 0x1b, 0x0c, 0xd1, 0x1d, 0xf2, 0xf4, 0xf5, 0x41, 0x2f, 0xf3, 0x98, 0x78, 0xe8, 0x72, 0x72,
	0x89, 0x7e, 0xf2, 0x1f, 0xc2, 0x77, 0xa1, 0x3d, 0xc3, 0x72, 0xaa, 0xf8, 0xb5, 0x01, 0x9e, 0x47,
	0x2f, 0x19, 0x1d, 0x48, 0x4f, 0x5a, 0x86, 0x0d, 0x50, 0x97, 0xa5, 0x0f, 0x7d, 0xcb, 0xfc, 0xc6,
	0x1f, 0x0d, 0x58, 0x9c, 0x7d, 0x0c, 0x9c, 0x3a, 0x6c, 0x43, 0xfb, 0xa5, 0x1e, 0x7f, 0x4f, 0x75,
	0xef, 0xad, 0xdf, 0x1d, 0xf4, 0x1b, 0xe4, 0x78, 0xc9, 0x94, 0xdb, 0x0e, 0x29, 0xbb, 0x22, 0xcc,
	0x1f, 0xaf, 0xc9, 0xf9, 0x7c, 0xf9, 0x35, 0xa3, 0xd1, 0xe0, 0x59, 0xf2, 0xf8, 0xfc, 0x13, 0xfd,
	0xf6, 0x6c, 0x55, 0xf3, 0x0f, 0x17, 0x35, 0x7b, 0x15, 0xec, 0xe7, 0xd1, 0x25, 0x09, 0x03, 0x3f,
	0xf3, 0xd2, 0x69, 0xd5, 0x73, 0x77, 0x6b, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x31,
	0x2b, 0xba, 0xe7, 0x1b, 0x00, 0x00,
}
